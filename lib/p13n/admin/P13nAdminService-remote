#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from p13n.admin import P13nAdminService
from p13n.admin.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string uploadChoiceConfiguration(string xmlPayload)')
    print('  i32 saveProfileProperties( profilePropertyValues)')
    print('  i32 replaceProfileProperties( profilePropertyValues)')
    print('  string command(string command)')
    print('  Choice retrieveChoice(string id)')
    print('  Scenario retrieveScenario(string id)')
    print('  RecommendationVariant retrieveRecommendationVariant(string id)')
    print('  string persistChoice(Choice choice)')
    print('  string persistScenario(Scenario scenario)')
    print('  string persistRecommendationVariant(RecommendationVariant recommendationVariant)')
    print('  void updateAuthEntry(AuthEntry authEntry)')
    print('  void deleteAuthEntry(AuthEntry authEntry)')
    print('  void updatePMMLModel(string id, string xml)')
    print('  void deletePMMLModel(string id)')
    print('  void updateCorrelation( correlations)')
    print('  void updateResources( resources)')
    print('  void updateTransactions( transactionItems)')
    print('  void updateCategories( categories)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = P13nAdminService.Client(protocol)
transport.open()

if cmd == 'uploadChoiceConfiguration':
    if len(args) != 1:
        print('uploadChoiceConfiguration requires 1 args')
        sys.exit(1)
    pp.pprint(client.uploadChoiceConfiguration(args[0],))

elif cmd == 'saveProfileProperties':
    if len(args) != 1:
        print('saveProfileProperties requires 1 args')
        sys.exit(1)
    pp.pprint(client.saveProfileProperties(eval(args[0]),))

elif cmd == 'replaceProfileProperties':
    if len(args) != 1:
        print('replaceProfileProperties requires 1 args')
        sys.exit(1)
    pp.pprint(client.replaceProfileProperties(eval(args[0]),))

elif cmd == 'command':
    if len(args) != 1:
        print('command requires 1 args')
        sys.exit(1)
    pp.pprint(client.command(args[0],))

elif cmd == 'retrieveChoice':
    if len(args) != 1:
        print('retrieveChoice requires 1 args')
        sys.exit(1)
    pp.pprint(client.retrieveChoice(args[0],))

elif cmd == 'retrieveScenario':
    if len(args) != 1:
        print('retrieveScenario requires 1 args')
        sys.exit(1)
    pp.pprint(client.retrieveScenario(args[0],))

elif cmd == 'retrieveRecommendationVariant':
    if len(args) != 1:
        print('retrieveRecommendationVariant requires 1 args')
        sys.exit(1)
    pp.pprint(client.retrieveRecommendationVariant(args[0],))

elif cmd == 'persistChoice':
    if len(args) != 1:
        print('persistChoice requires 1 args')
        sys.exit(1)
    pp.pprint(client.persistChoice(eval(args[0]),))

elif cmd == 'persistScenario':
    if len(args) != 1:
        print('persistScenario requires 1 args')
        sys.exit(1)
    pp.pprint(client.persistScenario(eval(args[0]),))

elif cmd == 'persistRecommendationVariant':
    if len(args) != 1:
        print('persistRecommendationVariant requires 1 args')
        sys.exit(1)
    pp.pprint(client.persistRecommendationVariant(eval(args[0]),))

elif cmd == 'updateAuthEntry':
    if len(args) != 1:
        print('updateAuthEntry requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateAuthEntry(eval(args[0]),))

elif cmd == 'deleteAuthEntry':
    if len(args) != 1:
        print('deleteAuthEntry requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteAuthEntry(eval(args[0]),))

elif cmd == 'updatePMMLModel':
    if len(args) != 2:
        print('updatePMMLModel requires 2 args')
        sys.exit(1)
    pp.pprint(client.updatePMMLModel(args[0], args[1],))

elif cmd == 'deletePMMLModel':
    if len(args) != 1:
        print('deletePMMLModel requires 1 args')
        sys.exit(1)
    pp.pprint(client.deletePMMLModel(args[0],))

elif cmd == 'updateCorrelation':
    if len(args) != 1:
        print('updateCorrelation requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateCorrelation(eval(args[0]),))

elif cmd == 'updateResources':
    if len(args) != 1:
        print('updateResources requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateResources(eval(args[0]),))

elif cmd == 'updateTransactions':
    if len(args) != 1:
        print('updateTransactions requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateTransactions(eval(args[0]),))

elif cmd == 'updateCategories':
    if len(args) != 1:
        print('updateCategories requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateCategories(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
