#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    def uploadChoiceConfiguration(self, xmlPayload):
        """
        <dl>
        <dt>@param xmlPayload</dt>
        <dd>the XML to upload as raw data</dd>

        <dt>@return</dt>
        <dd>binary data</dd>

        <dt>@throws P13nServiceException</dt>
        <dd>an exception containing an error message</dd>
        </dl>

        Parameters:
         - xmlPayload
        """
        pass

    def saveProfileProperties(self, profilePropertyValues):
        """
        <dl>
        <dt>@param profilePropertyValues</dt>
        <dd>the list of ProfilePropertyValue objects to save</dd>

        <dt>@return</dt>
        <dd>an integer</dd>

        <dt>@throws P13nServiceException</dt>
        <dd>an exception containing an error message</dd>
        </dl>

        Parameters:
         - profilePropertyValues
        """
        pass

    def replaceProfileProperties(self, profilePropertyValues):
        """
        <dl>
        <dt>@param profilePropertyValues</dt>
        <dd>the list of ProfilePropertyValue objects to save</dd>

        <dt>@return</dt>
        <dd>an integer</dd>

        <dt>@throws P13nServiceException</dt>
        <dd>an exception containing an error message</dd>
        </dl>

        Parameters:
         - profilePropertyValues
        """
        pass

    def command(self, command):
        """
        <dl>
        <dt>@param command</dt>
        <dd>the command to execute</dd>

        <dt>@return</dt>
        <dd>a string containing the result of the command</dd>

        <dt>@throws P13nServiceException</dt>
        <dd>an exception containing an error message</dd>
        </dl>

        Parameters:
         - command
        """
        pass

    def retrieveChoice(self, id):
        """
        Parameters:
         - id
        """
        pass

    def retrieveScenario(self, id):
        """
        Parameters:
         - id
        """
        pass

    def retrieveRecommendationVariant(self, id):
        """
        Parameters:
         - id
        """
        pass

    def persistChoice(self, choice):
        """
        Parameters:
         - choice
        """
        pass

    def persistScenario(self, scenario):
        """
        Parameters:
         - scenario
        """
        pass

    def persistRecommendationVariant(self, recommendationVariant):
        """
        Parameters:
         - recommendationVariant
        """
        pass

    def updateAuthEntry(self, authEntry):
        """
        Parameters:
         - authEntry
        """
        pass

    def deleteAuthEntry(self, authEntry):
        """
        Parameters:
         - authEntry
        """
        pass

    def updatePMMLModel(self, id, xml):
        """
        Parameters:
         - id
         - xml
        """
        pass

    def deletePMMLModel(self, id):
        """
        Parameters:
         - id
        """
        pass

    def updateCorrelation(self, correlations):
        """
        Parameters:
         - correlations
        """
        pass

    def updateResources(self, resources):
        """
        Parameters:
         - resources
        """
        pass

    def updateTransactions(self, transactionItems):
        """
        Parameters:
         - transactionItems
        """
        pass

    def updateCategories(self, categories):
        """
        Parameters:
         - categories
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def uploadChoiceConfiguration(self, xmlPayload):
        """
        <dl>
        <dt>@param xmlPayload</dt>
        <dd>the XML to upload as raw data</dd>

        <dt>@return</dt>
        <dd>binary data</dd>

        <dt>@throws P13nServiceException</dt>
        <dd>an exception containing an error message</dd>
        </dl>

        Parameters:
         - xmlPayload
        """
        self.send_uploadChoiceConfiguration(xmlPayload)
        return self.recv_uploadChoiceConfiguration()

    def send_uploadChoiceConfiguration(self, xmlPayload):
        self._oprot.writeMessageBegin('uploadChoiceConfiguration', TMessageType.CALL, self._seqid)
        args = uploadChoiceConfiguration_args()
        args.xmlPayload = xmlPayload
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_uploadChoiceConfiguration(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = uploadChoiceConfiguration_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "uploadChoiceConfiguration failed: unknown result")

    def saveProfileProperties(self, profilePropertyValues):
        """
        <dl>
        <dt>@param profilePropertyValues</dt>
        <dd>the list of ProfilePropertyValue objects to save</dd>

        <dt>@return</dt>
        <dd>an integer</dd>

        <dt>@throws P13nServiceException</dt>
        <dd>an exception containing an error message</dd>
        </dl>

        Parameters:
         - profilePropertyValues
        """
        self.send_saveProfileProperties(profilePropertyValues)
        return self.recv_saveProfileProperties()

    def send_saveProfileProperties(self, profilePropertyValues):
        self._oprot.writeMessageBegin('saveProfileProperties', TMessageType.CALL, self._seqid)
        args = saveProfileProperties_args()
        args.profilePropertyValues = profilePropertyValues
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_saveProfileProperties(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = saveProfileProperties_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "saveProfileProperties failed: unknown result")

    def replaceProfileProperties(self, profilePropertyValues):
        """
        <dl>
        <dt>@param profilePropertyValues</dt>
        <dd>the list of ProfilePropertyValue objects to save</dd>

        <dt>@return</dt>
        <dd>an integer</dd>

        <dt>@throws P13nServiceException</dt>
        <dd>an exception containing an error message</dd>
        </dl>

        Parameters:
         - profilePropertyValues
        """
        self.send_replaceProfileProperties(profilePropertyValues)
        return self.recv_replaceProfileProperties()

    def send_replaceProfileProperties(self, profilePropertyValues):
        self._oprot.writeMessageBegin('replaceProfileProperties', TMessageType.CALL, self._seqid)
        args = replaceProfileProperties_args()
        args.profilePropertyValues = profilePropertyValues
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_replaceProfileProperties(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = replaceProfileProperties_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "replaceProfileProperties failed: unknown result")

    def command(self, command):
        """
        <dl>
        <dt>@param command</dt>
        <dd>the command to execute</dd>

        <dt>@return</dt>
        <dd>a string containing the result of the command</dd>

        <dt>@throws P13nServiceException</dt>
        <dd>an exception containing an error message</dd>
        </dl>

        Parameters:
         - command
        """
        self.send_command(command)
        return self.recv_command()

    def send_command(self, command):
        self._oprot.writeMessageBegin('command', TMessageType.CALL, self._seqid)
        args = command_args()
        args.command = command
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_command(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = command_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "command failed: unknown result")

    def retrieveChoice(self, id):
        """
        Parameters:
         - id
        """
        self.send_retrieveChoice(id)
        return self.recv_retrieveChoice()

    def send_retrieveChoice(self, id):
        self._oprot.writeMessageBegin('retrieveChoice', TMessageType.CALL, self._seqid)
        args = retrieveChoice_args()
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_retrieveChoice(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = retrieveChoice_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieveChoice failed: unknown result")

    def retrieveScenario(self, id):
        """
        Parameters:
         - id
        """
        self.send_retrieveScenario(id)
        return self.recv_retrieveScenario()

    def send_retrieveScenario(self, id):
        self._oprot.writeMessageBegin('retrieveScenario', TMessageType.CALL, self._seqid)
        args = retrieveScenario_args()
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_retrieveScenario(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = retrieveScenario_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieveScenario failed: unknown result")

    def retrieveRecommendationVariant(self, id):
        """
        Parameters:
         - id
        """
        self.send_retrieveRecommendationVariant(id)
        return self.recv_retrieveRecommendationVariant()

    def send_retrieveRecommendationVariant(self, id):
        self._oprot.writeMessageBegin('retrieveRecommendationVariant', TMessageType.CALL, self._seqid)
        args = retrieveRecommendationVariant_args()
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_retrieveRecommendationVariant(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = retrieveRecommendationVariant_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieveRecommendationVariant failed: unknown result")

    def persistChoice(self, choice):
        """
        Parameters:
         - choice
        """
        self.send_persistChoice(choice)
        return self.recv_persistChoice()

    def send_persistChoice(self, choice):
        self._oprot.writeMessageBegin('persistChoice', TMessageType.CALL, self._seqid)
        args = persistChoice_args()
        args.choice = choice
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_persistChoice(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = persistChoice_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "persistChoice failed: unknown result")

    def persistScenario(self, scenario):
        """
        Parameters:
         - scenario
        """
        self.send_persistScenario(scenario)
        return self.recv_persistScenario()

    def send_persistScenario(self, scenario):
        self._oprot.writeMessageBegin('persistScenario', TMessageType.CALL, self._seqid)
        args = persistScenario_args()
        args.scenario = scenario
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_persistScenario(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = persistScenario_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "persistScenario failed: unknown result")

    def persistRecommendationVariant(self, recommendationVariant):
        """
        Parameters:
         - recommendationVariant
        """
        self.send_persistRecommendationVariant(recommendationVariant)
        return self.recv_persistRecommendationVariant()

    def send_persistRecommendationVariant(self, recommendationVariant):
        self._oprot.writeMessageBegin('persistRecommendationVariant', TMessageType.CALL, self._seqid)
        args = persistRecommendationVariant_args()
        args.recommendationVariant = recommendationVariant
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_persistRecommendationVariant(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = persistRecommendationVariant_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "persistRecommendationVariant failed: unknown result")

    def updateAuthEntry(self, authEntry):
        """
        Parameters:
         - authEntry
        """
        self.send_updateAuthEntry(authEntry)
        self.recv_updateAuthEntry()

    def send_updateAuthEntry(self, authEntry):
        self._oprot.writeMessageBegin('updateAuthEntry', TMessageType.CALL, self._seqid)
        args = updateAuthEntry_args()
        args.authEntry = authEntry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateAuthEntry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateAuthEntry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        return

    def deleteAuthEntry(self, authEntry):
        """
        Parameters:
         - authEntry
        """
        self.send_deleteAuthEntry(authEntry)
        self.recv_deleteAuthEntry()

    def send_deleteAuthEntry(self, authEntry):
        self._oprot.writeMessageBegin('deleteAuthEntry', TMessageType.CALL, self._seqid)
        args = deleteAuthEntry_args()
        args.authEntry = authEntry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteAuthEntry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteAuthEntry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        return

    def updatePMMLModel(self, id, xml):
        """
        Parameters:
         - id
         - xml
        """
        self.send_updatePMMLModel(id, xml)
        self.recv_updatePMMLModel()

    def send_updatePMMLModel(self, id, xml):
        self._oprot.writeMessageBegin('updatePMMLModel', TMessageType.CALL, self._seqid)
        args = updatePMMLModel_args()
        args.id = id
        args.xml = xml
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updatePMMLModel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updatePMMLModel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        return

    def deletePMMLModel(self, id):
        """
        Parameters:
         - id
        """
        self.send_deletePMMLModel(id)
        self.recv_deletePMMLModel()

    def send_deletePMMLModel(self, id):
        self._oprot.writeMessageBegin('deletePMMLModel', TMessageType.CALL, self._seqid)
        args = deletePMMLModel_args()
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deletePMMLModel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deletePMMLModel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        return

    def updateCorrelation(self, correlations):
        """
        Parameters:
         - correlations
        """
        self.send_updateCorrelation(correlations)
        self.recv_updateCorrelation()

    def send_updateCorrelation(self, correlations):
        self._oprot.writeMessageBegin('updateCorrelation', TMessageType.CALL, self._seqid)
        args = updateCorrelation_args()
        args.correlations = correlations
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateCorrelation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateCorrelation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        return

    def updateResources(self, resources):
        """
        Parameters:
         - resources
        """
        self.send_updateResources(resources)
        self.recv_updateResources()

    def send_updateResources(self, resources):
        self._oprot.writeMessageBegin('updateResources', TMessageType.CALL, self._seqid)
        args = updateResources_args()
        args.resources = resources
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateResources(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateResources_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        return

    def updateTransactions(self, transactionItems):
        """
        Parameters:
         - transactionItems
        """
        self.send_updateTransactions(transactionItems)
        self.recv_updateTransactions()

    def send_updateTransactions(self, transactionItems):
        self._oprot.writeMessageBegin('updateTransactions', TMessageType.CALL, self._seqid)
        args = updateTransactions_args()
        args.transactionItems = transactionItems
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateTransactions(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateTransactions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        return

    def updateCategories(self, categories):
        """
        Parameters:
         - categories
        """
        self.send_updateCategories(categories)
        self.recv_updateCategories()

    def send_updateCategories(self, categories):
        self._oprot.writeMessageBegin('updateCategories', TMessageType.CALL, self._seqid)
        args = updateCategories_args()
        args.categories = categories
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateCategories(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateCategories_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.p13nServiceException is not None:
            raise result.p13nServiceException
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["uploadChoiceConfiguration"] = Processor.process_uploadChoiceConfiguration
        self._processMap["saveProfileProperties"] = Processor.process_saveProfileProperties
        self._processMap["replaceProfileProperties"] = Processor.process_replaceProfileProperties
        self._processMap["command"] = Processor.process_command
        self._processMap["retrieveChoice"] = Processor.process_retrieveChoice
        self._processMap["retrieveScenario"] = Processor.process_retrieveScenario
        self._processMap["retrieveRecommendationVariant"] = Processor.process_retrieveRecommendationVariant
        self._processMap["persistChoice"] = Processor.process_persistChoice
        self._processMap["persistScenario"] = Processor.process_persistScenario
        self._processMap["persistRecommendationVariant"] = Processor.process_persistRecommendationVariant
        self._processMap["updateAuthEntry"] = Processor.process_updateAuthEntry
        self._processMap["deleteAuthEntry"] = Processor.process_deleteAuthEntry
        self._processMap["updatePMMLModel"] = Processor.process_updatePMMLModel
        self._processMap["deletePMMLModel"] = Processor.process_deletePMMLModel
        self._processMap["updateCorrelation"] = Processor.process_updateCorrelation
        self._processMap["updateResources"] = Processor.process_updateResources
        self._processMap["updateTransactions"] = Processor.process_updateTransactions
        self._processMap["updateCategories"] = Processor.process_updateCategories

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_uploadChoiceConfiguration(self, seqid, iprot, oprot):
        args = uploadChoiceConfiguration_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = uploadChoiceConfiguration_result()
        try:
            result.success = self._handler.uploadChoiceConfiguration(args.xmlPayload)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("uploadChoiceConfiguration", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_saveProfileProperties(self, seqid, iprot, oprot):
        args = saveProfileProperties_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = saveProfileProperties_result()
        try:
            result.success = self._handler.saveProfileProperties(args.profilePropertyValues)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("saveProfileProperties", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_replaceProfileProperties(self, seqid, iprot, oprot):
        args = replaceProfileProperties_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = replaceProfileProperties_result()
        try:
            result.success = self._handler.replaceProfileProperties(args.profilePropertyValues)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("replaceProfileProperties", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_command(self, seqid, iprot, oprot):
        args = command_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = command_result()
        try:
            result.success = self._handler.command(args.command)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("command", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_retrieveChoice(self, seqid, iprot, oprot):
        args = retrieveChoice_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = retrieveChoice_result()
        try:
            result.success = self._handler.retrieveChoice(args.id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("retrieveChoice", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_retrieveScenario(self, seqid, iprot, oprot):
        args = retrieveScenario_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = retrieveScenario_result()
        try:
            result.success = self._handler.retrieveScenario(args.id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("retrieveScenario", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_retrieveRecommendationVariant(self, seqid, iprot, oprot):
        args = retrieveRecommendationVariant_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = retrieveRecommendationVariant_result()
        try:
            result.success = self._handler.retrieveRecommendationVariant(args.id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("retrieveRecommendationVariant", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_persistChoice(self, seqid, iprot, oprot):
        args = persistChoice_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = persistChoice_result()
        try:
            result.success = self._handler.persistChoice(args.choice)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("persistChoice", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_persistScenario(self, seqid, iprot, oprot):
        args = persistScenario_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = persistScenario_result()
        try:
            result.success = self._handler.persistScenario(args.scenario)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("persistScenario", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_persistRecommendationVariant(self, seqid, iprot, oprot):
        args = persistRecommendationVariant_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = persistRecommendationVariant_result()
        try:
            result.success = self._handler.persistRecommendationVariant(args.recommendationVariant)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("persistRecommendationVariant", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateAuthEntry(self, seqid, iprot, oprot):
        args = updateAuthEntry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateAuthEntry_result()
        try:
            self._handler.updateAuthEntry(args.authEntry)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateAuthEntry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteAuthEntry(self, seqid, iprot, oprot):
        args = deleteAuthEntry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteAuthEntry_result()
        try:
            self._handler.deleteAuthEntry(args.authEntry)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteAuthEntry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updatePMMLModel(self, seqid, iprot, oprot):
        args = updatePMMLModel_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updatePMMLModel_result()
        try:
            self._handler.updatePMMLModel(args.id, args.xml)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updatePMMLModel", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deletePMMLModel(self, seqid, iprot, oprot):
        args = deletePMMLModel_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deletePMMLModel_result()
        try:
            self._handler.deletePMMLModel(args.id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deletePMMLModel", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateCorrelation(self, seqid, iprot, oprot):
        args = updateCorrelation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateCorrelation_result()
        try:
            self._handler.updateCorrelation(args.correlations)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateCorrelation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateResources(self, seqid, iprot, oprot):
        args = updateResources_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateResources_result()
        try:
            self._handler.updateResources(args.resources)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateResources", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateTransactions(self, seqid, iprot, oprot):
        args = updateTransactions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateTransactions_result()
        try:
            self._handler.updateTransactions(args.transactionItems)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateTransactions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateCategories(self, seqid, iprot, oprot):
        args = updateCategories_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateCategories_result()
        try:
            self._handler.updateCategories(args.categories)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except P13nServiceException as p13nServiceException:
            msg_type = TMessageType.REPLY
            result.p13nServiceException = p13nServiceException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateCategories", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class uploadChoiceConfiguration_args(object):
    """
    Attributes:
     - xmlPayload
    """

    thrift_spec = None

    def __init__(self, xmlPayload=None,):
        self.xmlPayload = xmlPayload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRING:
                    self.xmlPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('uploadChoiceConfiguration_args')
        if self.xmlPayload is not None:
            oprot.writeFieldBegin('xmlPayload', TType.STRING, -1)
            oprot.writeBinary(self.xmlPayload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class uploadChoiceConfiguration_result(object):
    """
    Attributes:
     - success
     - p13nServiceException
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'BINARY', None, ),  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, p13nServiceException=None,):
        self.success = success
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('uploadChoiceConfiguration_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class saveProfileProperties_args(object):
    """
    Attributes:
     - profilePropertyValues
    """

    thrift_spec = None

    def __init__(self, profilePropertyValues=None,):
        self.profilePropertyValues = profilePropertyValues

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.LIST:
                    self.profilePropertyValues = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = ProfilePropertyValue()
                        _elem110.read(iprot)
                        self.profilePropertyValues.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('saveProfileProperties_args')
        if self.profilePropertyValues is not None:
            oprot.writeFieldBegin('profilePropertyValues', TType.LIST, -1)
            oprot.writeListBegin(TType.STRUCT, len(self.profilePropertyValues))
            for iter111 in self.profilePropertyValues:
                iter111.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class saveProfileProperties_result(object):
    """
    Attributes:
     - success
     - p13nServiceException
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, p13nServiceException=None,):
        self.success = success
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('saveProfileProperties_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class replaceProfileProperties_args(object):
    """
    Attributes:
     - profilePropertyValues
    """

    thrift_spec = None

    def __init__(self, profilePropertyValues=None,):
        self.profilePropertyValues = profilePropertyValues

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.LIST:
                    self.profilePropertyValues = []
                    (_etype115, _size112) = iprot.readListBegin()
                    for _i116 in range(_size112):
                        _elem117 = ProfilePropertyValue()
                        _elem117.read(iprot)
                        self.profilePropertyValues.append(_elem117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('replaceProfileProperties_args')
        if self.profilePropertyValues is not None:
            oprot.writeFieldBegin('profilePropertyValues', TType.LIST, -1)
            oprot.writeListBegin(TType.STRUCT, len(self.profilePropertyValues))
            for iter118 in self.profilePropertyValues:
                iter118.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class replaceProfileProperties_result(object):
    """
    Attributes:
     - success
     - p13nServiceException
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, p13nServiceException=None,):
        self.success = success
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('replaceProfileProperties_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class command_args(object):
    """
    Attributes:
     - command
    """

    thrift_spec = None

    def __init__(self, command=None,):
        self.command = command

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRING:
                    self.command = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('command_args')
        if self.command is not None:
            oprot.writeFieldBegin('command', TType.STRING, -1)
            oprot.writeString(self.command.encode('utf-8') if sys.version_info[0] == 2 else self.command)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class command_result(object):
    """
    Attributes:
     - success
     - p13nServiceException
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, p13nServiceException=None,):
        self.success = success
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('command_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class retrieveChoice_args(object):
    """
    Attributes:
     - id
    """

    thrift_spec = None

    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('retrieveChoice_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, -1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class retrieveChoice_result(object):
    """
    Attributes:
     - success
     - p13nServiceException
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (Choice, Choice.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, p13nServiceException=None,):
        self.success = success
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Choice()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('retrieveChoice_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class retrieveScenario_args(object):
    """
    Attributes:
     - id
    """

    thrift_spec = None

    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('retrieveScenario_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, -1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class retrieveScenario_result(object):
    """
    Attributes:
     - success
     - p13nServiceException
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (Scenario, Scenario.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, p13nServiceException=None,):
        self.success = success
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Scenario()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('retrieveScenario_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class retrieveRecommendationVariant_args(object):
    """
    Attributes:
     - id
    """

    thrift_spec = None

    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('retrieveRecommendationVariant_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, -1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class retrieveRecommendationVariant_result(object):
    """
    Attributes:
     - success
     - p13nServiceException
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (RecommendationVariant, RecommendationVariant.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, p13nServiceException=None,):
        self.success = success
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = RecommendationVariant()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('retrieveRecommendationVariant_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class persistChoice_args(object):
    """
    Attributes:
     - choice
    """

    thrift_spec = None

    def __init__(self, choice=None,):
        self.choice = choice

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRUCT:
                    self.choice = Choice()
                    self.choice.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('persistChoice_args')
        if self.choice is not None:
            oprot.writeFieldBegin('choice', TType.STRUCT, -1)
            self.choice.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class persistChoice_result(object):
    """
    Attributes:
     - success
     - p13nServiceException
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, p13nServiceException=None,):
        self.success = success
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('persistChoice_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class persistScenario_args(object):
    """
    Attributes:
     - scenario
    """

    thrift_spec = None

    def __init__(self, scenario=None,):
        self.scenario = scenario

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRUCT:
                    self.scenario = Scenario()
                    self.scenario.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('persistScenario_args')
        if self.scenario is not None:
            oprot.writeFieldBegin('scenario', TType.STRUCT, -1)
            self.scenario.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class persistScenario_result(object):
    """
    Attributes:
     - success
     - p13nServiceException
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, p13nServiceException=None,):
        self.success = success
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('persistScenario_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class persistRecommendationVariant_args(object):
    """
    Attributes:
     - recommendationVariant
    """

    thrift_spec = None

    def __init__(self, recommendationVariant=None,):
        self.recommendationVariant = recommendationVariant

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRUCT:
                    self.recommendationVariant = RecommendationVariant()
                    self.recommendationVariant.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('persistRecommendationVariant_args')
        if self.recommendationVariant is not None:
            oprot.writeFieldBegin('recommendationVariant', TType.STRUCT, -1)
            self.recommendationVariant.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class persistRecommendationVariant_result(object):
    """
    Attributes:
     - success
     - p13nServiceException
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, p13nServiceException=None,):
        self.success = success
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('persistRecommendationVariant_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateAuthEntry_args(object):
    """
    Attributes:
     - authEntry
    """

    thrift_spec = None

    def __init__(self, authEntry=None,):
        self.authEntry = authEntry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRUCT:
                    self.authEntry = AuthEntry()
                    self.authEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateAuthEntry_args')
        if self.authEntry is not None:
            oprot.writeFieldBegin('authEntry', TType.STRUCT, -1)
            self.authEntry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateAuthEntry_result(object):
    """
    Attributes:
     - p13nServiceException
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, p13nServiceException=None,):
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateAuthEntry_result')
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteAuthEntry_args(object):
    """
    Attributes:
     - authEntry
    """

    thrift_spec = None

    def __init__(self, authEntry=None,):
        self.authEntry = authEntry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRUCT:
                    self.authEntry = AuthEntry()
                    self.authEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteAuthEntry_args')
        if self.authEntry is not None:
            oprot.writeFieldBegin('authEntry', TType.STRUCT, -1)
            self.authEntry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteAuthEntry_result(object):
    """
    Attributes:
     - p13nServiceException
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, p13nServiceException=None,):
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteAuthEntry_result')
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updatePMMLModel_args(object):
    """
    Attributes:
     - id
     - xml
    """

    thrift_spec = None

    def __init__(self, id=None, xml=None,):
        self.id = id
        self.xml = xml

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -2:
                if ftype == TType.STRING:
                    self.xml = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updatePMMLModel_args')
        if self.xml is not None:
            oprot.writeFieldBegin('xml', TType.STRING, -2)
            oprot.writeBinary(self.xml)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, -1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updatePMMLModel_result(object):
    """
    Attributes:
     - p13nServiceException
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, p13nServiceException=None,):
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updatePMMLModel_result')
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deletePMMLModel_args(object):
    """
    Attributes:
     - id
    """

    thrift_spec = None

    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deletePMMLModel_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, -1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deletePMMLModel_result(object):
    """
    Attributes:
     - p13nServiceException
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, p13nServiceException=None,):
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deletePMMLModel_result')
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateCorrelation_args(object):
    """
    Attributes:
     - correlations
    """

    thrift_spec = None

    def __init__(self, correlations=None,):
        self.correlations = correlations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.LIST:
                    self.correlations = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = Correlation()
                        _elem124.read(iprot)
                        self.correlations.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateCorrelation_args')
        if self.correlations is not None:
            oprot.writeFieldBegin('correlations', TType.LIST, -1)
            oprot.writeListBegin(TType.STRUCT, len(self.correlations))
            for iter125 in self.correlations:
                iter125.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateCorrelation_result(object):
    """
    Attributes:
     - p13nServiceException
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, p13nServiceException=None,):
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateCorrelation_result')
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateResources_args(object):
    """
    Attributes:
     - resources
    """

    thrift_spec = None

    def __init__(self, resources=None,):
        self.resources = resources

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.LIST:
                    self.resources = []
                    (_etype129, _size126) = iprot.readListBegin()
                    for _i130 in range(_size126):
                        _elem131 = Resource()
                        _elem131.read(iprot)
                        self.resources.append(_elem131)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateResources_args')
        if self.resources is not None:
            oprot.writeFieldBegin('resources', TType.LIST, -1)
            oprot.writeListBegin(TType.STRUCT, len(self.resources))
            for iter132 in self.resources:
                iter132.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateResources_result(object):
    """
    Attributes:
     - p13nServiceException
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, p13nServiceException=None,):
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateResources_result')
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateTransactions_args(object):
    """
    Attributes:
     - transactionItems
    """

    thrift_spec = None

    def __init__(self, transactionItems=None,):
        self.transactionItems = transactionItems

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.LIST:
                    self.transactionItems = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = TransactionItem()
                        _elem138.read(iprot)
                        self.transactionItems.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateTransactions_args')
        if self.transactionItems is not None:
            oprot.writeFieldBegin('transactionItems', TType.LIST, -1)
            oprot.writeListBegin(TType.STRUCT, len(self.transactionItems))
            for iter139 in self.transactionItems:
                iter139.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateTransactions_result(object):
    """
    Attributes:
     - p13nServiceException
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, p13nServiceException=None,):
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateTransactions_result')
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateCategories_args(object):
    """
    Attributes:
     - categories
    """

    thrift_spec = None

    def __init__(self, categories=None,):
        self.categories = categories

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.LIST:
                    self.categories = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = FlatCategory()
                        _elem145.read(iprot)
                        self.categories.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateCategories_args')
        if self.categories is not None:
            oprot.writeFieldBegin('categories', TType.LIST, -1)
            oprot.writeListBegin(TType.STRUCT, len(self.categories))
            for iter146 in self.categories:
                iter146.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateCategories_result(object):
    """
    Attributes:
     - p13nServiceException
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'p13nServiceException', (P13nServiceException, P13nServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, p13nServiceException=None,):
        self.p13nServiceException = p13nServiceException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.p13nServiceException = P13nServiceException()
                    self.p13nServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateCategories_result')
        if self.p13nServiceException is not None:
            oprot.writeFieldBegin('p13nServiceException', TType.STRUCT, 1)
            self.p13nServiceException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
