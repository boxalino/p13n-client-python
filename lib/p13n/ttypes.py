#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class DateRangeGap(object):
    """
    Used for date facets
    """
    SECOND = 1
    MINUTE = 2
    HOUR = 3
    DAY = 4
    WEEK = 5
    MONTH = 6
    YEAR = 7
    DECADE = 8
    CENTURY = 9

    _VALUES_TO_NAMES = {
        1: "SECOND",
        2: "MINUTE",
        3: "HOUR",
        4: "DAY",
        5: "WEEK",
        6: "MONTH",
        7: "YEAR",
        8: "DECADE",
        9: "CENTURY",
    }

    _NAMES_TO_VALUES = {
        "SECOND": 1,
        "MINUTE": 2,
        "HOUR": 3,
        "DAY": 4,
        "WEEK": 5,
        "MONTH": 6,
        "YEAR": 7,
        "DECADE": 8,
        "CENTURY": 9,
    }


class FacetSortOrder(object):
    """
    Whether facets should be order by population descending or by collation
    """
    POPULATION = 1
    COLLATION = 2

    _VALUES_TO_NAMES = {
        1: "POPULATION",
        2: "COLLATION",
    }

    _NAMES_TO_VALUES = {
        "POPULATION": 1,
        "COLLATION": 2,
    }


class Filter(object):
    """
    Filter to be used in query. Note that type of generated filter depends on first non-null and non-empty value in order of preference. Values of lower priority are ignored:
    stringValues!=null && simpleValues.size()>0 => simple match, prefix!=null => prefix match, hierarchy!=null && hierarchy.size()>0 => hierarchy filter, else range filter

    <dl>
    <dt>negative</dt>
    <dd>whether the filter is negative (boolean NOT)</dd>

    <dt>fieldName</dt>
    <dd>field name to apply filter to</dd>

    <dt>stringValues</dt>
    <dd>values for simple match</dd>

    <dt>prefix</dt>
    <dd>prefix match</dd>

    <dt>hierarchyId</dt>
    <dd>hierarchy filter - when corresponding hierarchical field has encoded id</dd>

    <dt>hierarchy</dt>
    <dd>hierarchy filter - for example categories path in top-down order</dd>

    <dt>rangeFrom</dt>
    <dd>lower bound for range filter</dd>

    <dt>rangeFromInclusive</dt>
    <dd>whether the lower bound is inclusive</dd>

    <dt>rangeTo</dt>
    <dd>upper bound for range filter</dd>

    <dt>rangeToInclusive</dt>
    <dd>whether the upper bound is inclusive</dd>
    </dl>

    Attributes:
     - negative
     - fieldName
     - stringValues
     - prefix
     - hierarchyId
     - hierarchy
     - rangeFrom
     - rangeFromInclusive
     - rangeTo
     - rangeToInclusive
    """

    thrift_spec = (
        None,  # 0
        (1, TType.BOOL, 'negative', None, None, ),  # 1
        (2, TType.STRING, 'fieldName', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'stringValues', (TType.STRING, 'UTF8', False), None, ),  # 3
        (4, TType.STRING, 'prefix', 'UTF8', None, ),  # 4
        (5, TType.LIST, 'hierarchy', (TType.STRING, 'UTF8', False), None, ),  # 5
        (6, TType.STRING, 'rangeFrom', 'UTF8', None, ),  # 6
        (7, TType.BOOL, 'rangeFromInclusive', None, None, ),  # 7
        (8, TType.STRING, 'rangeTo', 'UTF8', None, ),  # 8
        (9, TType.BOOL, 'rangeToInclusive', None, None, ),  # 9
        None,  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        None,  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        None,  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        None,  # 40
        (41, TType.STRING, 'hierarchyId', 'UTF8', None, ),  # 41
    )

    def __init__(self, negative=None, fieldName=None, stringValues=None, prefix=None, hierarchyId=None, hierarchy=None, rangeFrom=None, rangeFromInclusive=None, rangeTo=None, rangeToInclusive=None,):
        self.negative = negative
        self.fieldName = fieldName
        self.stringValues = stringValues
        self.prefix = prefix
        self.hierarchyId = hierarchyId
        self.hierarchy = hierarchy
        self.rangeFrom = rangeFrom
        self.rangeFromInclusive = rangeFromInclusive
        self.rangeTo = rangeTo
        self.rangeToInclusive = rangeToInclusive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.negative = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fieldName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.stringValues = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.stringValues.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.prefix = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRING:
                    self.hierarchyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.hierarchy = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.hierarchy.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.rangeFrom = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.rangeFromInclusive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.rangeTo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.rangeToInclusive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Filter')
        if self.negative is not None:
            oprot.writeFieldBegin('negative', TType.BOOL, 1)
            oprot.writeBool(self.negative)
            oprot.writeFieldEnd()
        if self.fieldName is not None:
            oprot.writeFieldBegin('fieldName', TType.STRING, 2)
            oprot.writeString(self.fieldName.encode('utf-8') if sys.version_info[0] == 2 else self.fieldName)
            oprot.writeFieldEnd()
        if self.stringValues is not None:
            oprot.writeFieldBegin('stringValues', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.stringValues))
            for iter12 in self.stringValues:
                oprot.writeString(iter12.encode('utf-8') if sys.version_info[0] == 2 else iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.prefix is not None:
            oprot.writeFieldBegin('prefix', TType.STRING, 4)
            oprot.writeString(self.prefix.encode('utf-8') if sys.version_info[0] == 2 else self.prefix)
            oprot.writeFieldEnd()
        if self.hierarchy is not None:
            oprot.writeFieldBegin('hierarchy', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.hierarchy))
            for iter13 in self.hierarchy:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rangeFrom is not None:
            oprot.writeFieldBegin('rangeFrom', TType.STRING, 6)
            oprot.writeString(self.rangeFrom.encode('utf-8') if sys.version_info[0] == 2 else self.rangeFrom)
            oprot.writeFieldEnd()
        if self.rangeFromInclusive is not None:
            oprot.writeFieldBegin('rangeFromInclusive', TType.BOOL, 7)
            oprot.writeBool(self.rangeFromInclusive)
            oprot.writeFieldEnd()
        if self.rangeTo is not None:
            oprot.writeFieldBegin('rangeTo', TType.STRING, 8)
            oprot.writeString(self.rangeTo.encode('utf-8') if sys.version_info[0] == 2 else self.rangeTo)
            oprot.writeFieldEnd()
        if self.rangeToInclusive is not None:
            oprot.writeFieldBegin('rangeToInclusive', TType.BOOL, 9)
            oprot.writeBool(self.rangeToInclusive)
            oprot.writeFieldEnd()
        if self.hierarchyId is not None:
            oprot.writeFieldBegin('hierarchyId', TType.STRING, 41)
            oprot.writeString(self.hierarchyId.encode('utf-8') if sys.version_info[0] == 2 else self.hierarchyId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FacetValue(object):
    """
    <dl>
    <dt>stringValue</dt>
    <dd>corresponding value of the facet</dd>

    <dt>rangeFromInclusive</dt>
    <dd>if range facets lower bound (inclusive)</dd>

    <dt>rangeToExclusive</dt>
    <dd>if range facets upper bound (inclusive)</dd>

    <dt>hitCount</dt>
    <dd>number of hits found</dd>

    <dt>hierarchyId</dt>
    <dd>id of hierarchy if corresponding field is hierarchical</dd>

    <dt>hierarchy</dt>
    <dd>hierarchy if corresponding field is hierarchical</dd>

    <dt>selected</dt>
    <dd>whether the facet value has been selected in corresponding FacetRequest</dd>
    </dl>

    Attributes:
     - stringValue
     - rangeFromInclusive
     - rangeToExclusive
     - hitCount
     - hierarchyId
     - hierarchy
     - selected
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'stringValue', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'rangeFromInclusive', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'rangeToExclusive', 'UTF8', None, ),  # 3
        (4, TType.I64, 'hitCount', None, None, ),  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        None,  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        None,  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        None,  # 40
        None,  # 41
        None,  # 42
        None,  # 43
        None,  # 44
        None,  # 45
        None,  # 46
        None,  # 47
        None,  # 48
        None,  # 49
        (50, TType.STRING, 'hierarchyId', 'UTF8', None, ),  # 50
        None,  # 51
        None,  # 52
        None,  # 53
        None,  # 54
        None,  # 55
        None,  # 56
        None,  # 57
        None,  # 58
        None,  # 59
        (60, TType.LIST, 'hierarchy', (TType.STRING, 'UTF8', False), None, ),  # 60
        None,  # 61
        None,  # 62
        None,  # 63
        None,  # 64
        None,  # 65
        None,  # 66
        None,  # 67
        None,  # 68
        None,  # 69
        (70, TType.BOOL, 'selected', None, None, ),  # 70
    )

    def __init__(self, stringValue=None, rangeFromInclusive=None, rangeToExclusive=None, hitCount=None, hierarchyId=None, hierarchy=None, selected=None,):
        self.stringValue = stringValue
        self.rangeFromInclusive = rangeFromInclusive
        self.rangeToExclusive = rangeToExclusive
        self.hitCount = hitCount
        self.hierarchyId = hierarchyId
        self.hierarchy = hierarchy
        self.selected = selected

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.rangeFromInclusive = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.rangeToExclusive = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.hitCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.hierarchyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.LIST:
                    self.hierarchy = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.hierarchy.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.BOOL:
                    self.selected = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FacetValue')
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 1)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        if self.rangeFromInclusive is not None:
            oprot.writeFieldBegin('rangeFromInclusive', TType.STRING, 2)
            oprot.writeString(self.rangeFromInclusive.encode('utf-8') if sys.version_info[0] == 2 else self.rangeFromInclusive)
            oprot.writeFieldEnd()
        if self.rangeToExclusive is not None:
            oprot.writeFieldBegin('rangeToExclusive', TType.STRING, 3)
            oprot.writeString(self.rangeToExclusive.encode('utf-8') if sys.version_info[0] == 2 else self.rangeToExclusive)
            oprot.writeFieldEnd()
        if self.hitCount is not None:
            oprot.writeFieldBegin('hitCount', TType.I64, 4)
            oprot.writeI64(self.hitCount)
            oprot.writeFieldEnd()
        if self.hierarchyId is not None:
            oprot.writeFieldBegin('hierarchyId', TType.STRING, 50)
            oprot.writeString(self.hierarchyId.encode('utf-8') if sys.version_info[0] == 2 else self.hierarchyId)
            oprot.writeFieldEnd()
        if self.hierarchy is not None:
            oprot.writeFieldBegin('hierarchy', TType.LIST, 60)
            oprot.writeListBegin(TType.STRING, len(self.hierarchy))
            for iter20 in self.hierarchy:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.selected is not None:
            oprot.writeFieldBegin('selected', TType.BOOL, 70)
            oprot.writeBool(self.selected)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FacetRequest(object):
    """
    <dl>
    <dt>fieldName</dt>
    <dd>name of the field to get facet for</dd>

    <dt>numerical</dt>
    <dd>whether the facet is numerical</dd>

    <dt>range</dt>
    <dd>whether the facet is range facet</dd>

    <dt>maxCount</dt>
    <dd>maximum number of facets to return by given order, -1 for all of them</dd>

    <dt>minPopulation</dt>
    <dd>minimum facet population to return</dd>

    <dt>dateRangeGap</dt>
    <dd>if the corresponding field is date then the gap to be used for facet</dd>

    <dt>sortOrder</dt>
    <dd>sort order</dd>

    <dt>sortAscending</dt>
    <dd>whether the sort should be done ascending</dd>

    <dt>selectedValues</dt>
    <dd>values selected from the facet.</dd>
    <dd>Note that results will be filtered by these values, but the corresponding
    FacetResponse is as if this filter was not applied</dd>

    <dt>andSelectedValues</dt>
    <dd>whether selectedValues should be considered in AND logic, meaning filter
    out those that don't contain ALL selected values - default is OR - include
    those contianing any of selectedValue</dd>

    <dt>boundsOnly</dt>
    <dd>only affects numeric range facets. will always return one FacetValue with rangeFromInclusive and rangeToExclusive
    set according to the actual minimum and maximum value</dd>
    </dl>

    Attributes:
     - fieldName
     - numerical
     - range
     - maxCount
     - minPopulation
     - dateRangeGap
     - sortOrder
     - sortAscending
     - selectedValues
     - andSelectedValues
     - boundsOnly
     - evaluate
     - display
     - extraInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'fieldName', 'UTF8', None, ),  # 1
        (2, TType.BOOL, 'numerical', None, None, ),  # 2
        (3, TType.BOOL, 'range', None, None, ),  # 3
        (4, TType.I32, 'maxCount', None, -1, ),  # 4
        (5, TType.I32, 'minPopulation', None, 1, ),  # 5
        (6, TType.I32, 'dateRangeGap', None, None, ),  # 6
        (7, TType.I32, 'sortOrder', None, None, ),  # 7
        (8, TType.BOOL, 'sortAscending', None, None, ),  # 8
        None,  # 9
        None,  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        None,  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        None,  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        None,  # 40
        None,  # 41
        None,  # 42
        None,  # 43
        None,  # 44
        None,  # 45
        None,  # 46
        None,  # 47
        None,  # 48
        None,  # 49
        None,  # 50
        None,  # 51
        None,  # 52
        None,  # 53
        None,  # 54
        None,  # 55
        None,  # 56
        None,  # 57
        None,  # 58
        None,  # 59
        None,  # 60
        None,  # 61
        None,  # 62
        None,  # 63
        None,  # 64
        None,  # 65
        None,  # 66
        None,  # 67
        None,  # 68
        None,  # 69
        None,  # 70
        None,  # 71
        None,  # 72
        None,  # 73
        None,  # 74
        None,  # 75
        None,  # 76
        None,  # 77
        None,  # 78
        None,  # 79
        None,  # 80
        None,  # 81
        None,  # 82
        None,  # 83
        None,  # 84
        None,  # 85
        None,  # 86
        None,  # 87
        None,  # 88
        None,  # 89
        (90, TType.LIST, 'selectedValues', (TType.STRUCT, (FacetValue, FacetValue.thrift_spec), False), None, ),  # 90
        None,  # 91
        None,  # 92
        None,  # 93
        None,  # 94
        None,  # 95
        None,  # 96
        None,  # 97
        None,  # 98
        None,  # 99
        (100, TType.BOOL, 'andSelectedValues', None, False, ),  # 100
        None,  # 101
        None,  # 102
        None,  # 103
        None,  # 104
        None,  # 105
        None,  # 106
        None,  # 107
        None,  # 108
        None,  # 109
        (110, TType.BOOL, 'boundsOnly', None, False, ),  # 110
        None,  # 111
        None,  # 112
        None,  # 113
        None,  # 114
        None,  # 115
        None,  # 116
        None,  # 117
        None,  # 118
        None,  # 119
        (120, TType.BOOL, 'evaluate', None, True, ),  # 120
        None,  # 121
        None,  # 122
        None,  # 123
        None,  # 124
        None,  # 125
        None,  # 126
        None,  # 127
        None,  # 128
        None,  # 129
        (130, TType.STRING, 'display', 'UTF8', None, ),  # 130
        None,  # 131
        None,  # 132
        None,  # 133
        None,  # 134
        None,  # 135
        None,  # 136
        None,  # 137
        None,  # 138
        None,  # 139
        (140, TType.MAP, 'extraInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 140
    )

    def __init__(self, fieldName=None, numerical=None, range=None, maxCount=thrift_spec[4][4], minPopulation=thrift_spec[5][4], dateRangeGap=None, sortOrder=None, sortAscending=None, selectedValues=None, andSelectedValues=thrift_spec[100][4], boundsOnly=thrift_spec[110][4], evaluate=thrift_spec[120][4], display=None, extraInfo=None,):
        self.fieldName = fieldName
        self.numerical = numerical
        self.range = range
        self.maxCount = maxCount
        self.minPopulation = minPopulation
        self.dateRangeGap = dateRangeGap
        self.sortOrder = sortOrder
        self.sortAscending = sortAscending
        self.selectedValues = selectedValues
        self.andSelectedValues = andSelectedValues
        self.boundsOnly = boundsOnly
        self.evaluate = evaluate
        self.display = display
        self.extraInfo = extraInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fieldName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.numerical = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.range = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.maxCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.minPopulation = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.dateRangeGap = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.sortOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.sortAscending = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 90:
                if ftype == TType.LIST:
                    self.selectedValues = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = FacetValue()
                        _elem26.read(iprot)
                        self.selectedValues.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 100:
                if ftype == TType.BOOL:
                    self.andSelectedValues = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 110:
                if ftype == TType.BOOL:
                    self.boundsOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 120:
                if ftype == TType.BOOL:
                    self.evaluate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 130:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 140:
                if ftype == TType.MAP:
                    self.extraInfo = {}
                    (_ktype28, _vtype29, _size27) = iprot.readMapBegin()
                    for _i31 in range(_size27):
                        _key32 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val33 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.extraInfo[_key32] = _val33
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FacetRequest')
        if self.fieldName is not None:
            oprot.writeFieldBegin('fieldName', TType.STRING, 1)
            oprot.writeString(self.fieldName.encode('utf-8') if sys.version_info[0] == 2 else self.fieldName)
            oprot.writeFieldEnd()
        if self.numerical is not None:
            oprot.writeFieldBegin('numerical', TType.BOOL, 2)
            oprot.writeBool(self.numerical)
            oprot.writeFieldEnd()
        if self.range is not None:
            oprot.writeFieldBegin('range', TType.BOOL, 3)
            oprot.writeBool(self.range)
            oprot.writeFieldEnd()
        if self.maxCount is not None:
            oprot.writeFieldBegin('maxCount', TType.I32, 4)
            oprot.writeI32(self.maxCount)
            oprot.writeFieldEnd()
        if self.minPopulation is not None:
            oprot.writeFieldBegin('minPopulation', TType.I32, 5)
            oprot.writeI32(self.minPopulation)
            oprot.writeFieldEnd()
        if self.dateRangeGap is not None:
            oprot.writeFieldBegin('dateRangeGap', TType.I32, 6)
            oprot.writeI32(self.dateRangeGap)
            oprot.writeFieldEnd()
        if self.sortOrder is not None:
            oprot.writeFieldBegin('sortOrder', TType.I32, 7)
            oprot.writeI32(self.sortOrder)
            oprot.writeFieldEnd()
        if self.sortAscending is not None:
            oprot.writeFieldBegin('sortAscending', TType.BOOL, 8)
            oprot.writeBool(self.sortAscending)
            oprot.writeFieldEnd()
        if self.selectedValues is not None:
            oprot.writeFieldBegin('selectedValues', TType.LIST, 90)
            oprot.writeListBegin(TType.STRUCT, len(self.selectedValues))
            for iter34 in self.selectedValues:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.andSelectedValues is not None:
            oprot.writeFieldBegin('andSelectedValues', TType.BOOL, 100)
            oprot.writeBool(self.andSelectedValues)
            oprot.writeFieldEnd()
        if self.boundsOnly is not None:
            oprot.writeFieldBegin('boundsOnly', TType.BOOL, 110)
            oprot.writeBool(self.boundsOnly)
            oprot.writeFieldEnd()
        if self.evaluate is not None:
            oprot.writeFieldBegin('evaluate', TType.BOOL, 120)
            oprot.writeBool(self.evaluate)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 130)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.extraInfo is not None:
            oprot.writeFieldBegin('extraInfo', TType.MAP, 140)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extraInfo))
            for kiter35, viter36 in self.extraInfo.items():
                oprot.writeString(kiter35.encode('utf-8') if sys.version_info[0] == 2 else kiter35)
                oprot.writeString(viter36.encode('utf-8') if sys.version_info[0] == 2 else viter36)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SortField(object):
    """
    field to be used for sorting

    Attributes:
     - fieldName
     - reverse
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'fieldName', 'UTF8', None, ),  # 1
        (2, TType.BOOL, 'reverse', None, None, ),  # 2
    )

    def __init__(self, fieldName=None, reverse=None,):
        self.fieldName = fieldName
        self.reverse = reverse

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fieldName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.reverse = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SortField')
        if self.fieldName is not None:
            oprot.writeFieldBegin('fieldName', TType.STRING, 1)
            oprot.writeString(self.fieldName.encode('utf-8') if sys.version_info[0] == 2 else self.fieldName)
            oprot.writeFieldEnd()
        if self.reverse is not None:
            oprot.writeFieldBegin('reverse', TType.BOOL, 2)
            oprot.writeBool(self.reverse)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimpleSearchQuery(object):
    """
    <dl>
    <dt>indexId</dt>
    <dd>indexId to be used for search</dd>

    <dt>language</dt>
    <dd>language for localization</dd>

    <dt>queryText</dt>
    <dd>main search query</dd>

    <dt>filters</dt>
    <dd>list of filters to apply</dd>

    <dt>orFilters</dt>
    <dd>whether boolean OR should be aplied to the given list of filters if false
    boolean AND will be applied</dd>

    <dt>facetRequests</dt>
    <dd>list of facets to be returned</dd>

    <dt>sortFields</dt>
    <dd>optional list of sort fields for hardcoded sorting. If not given,
    relevance sort order will be used</dd>

    <dt>offset</dt>
    <dd>from which hit to return result</dd>

    <dt>hitCount</dt>
    <dd>how many hits to return</dd>

    <dt>returnFields</dt>
    <dd>which index fields to be returned</dd>

    <dt>groupBy</dt>
    <dd>field name of the field to do grouping by</dd>

    <dt>groupFacets</dt>
    <dd>whether facets counts should contain number of groups</dd>

    <dt>groupItemsCount</dt>
    <dd>how many hits in each group to return</dd>

    <dt>groupItemsSort</dt>
    <dd>how to sort items within the group, default is score</dd>

    <dt>groupItemsSortAscending</dt>
    <dd>whether to sort items within the group ascending</dd>

    <dt>hitsGroupsAsHits</dt>
    <dd>if true, will return hitsGroups as hits in the response</dd>
    </dl>

    Attributes:
     - indexId
     - language
     - queryText
     - filters
     - orFilters
     - facetRequests
     - sortFields
     - offset
     - hitCount
     - returnFields
     - groupBy
     - groupFacets
     - groupItemsCount
     - groupItemsSort
     - groupItemsSortAscending
     - hitsGroupsAsHits
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'indexId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'language', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'queryText', 'UTF8', None, ),  # 3
        (4, TType.LIST, 'filters', (TType.STRUCT, (Filter, Filter.thrift_spec), False), None, ),  # 4
        (5, TType.BOOL, 'orFilters', None, None, ),  # 5
        (6, TType.LIST, 'facetRequests', (TType.STRUCT, (FacetRequest, FacetRequest.thrift_spec), False), None, ),  # 6
        (7, TType.LIST, 'sortFields', (TType.STRUCT, (SortField, SortField.thrift_spec), False), None, ),  # 7
        (8, TType.I64, 'offset', None, None, ),  # 8
        (9, TType.I32, 'hitCount', None, None, ),  # 9
        (10, TType.LIST, 'returnFields', (TType.STRING, 'UTF8', False), None, ),  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        (20, TType.STRING, 'groupBy', 'UTF8', None, ),  # 20
        None,  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        (30, TType.BOOL, 'groupFacets', None, True, ),  # 30
        None,  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        (40, TType.I32, 'groupItemsCount', None, 1, ),  # 40
        None,  # 41
        None,  # 42
        None,  # 43
        None,  # 44
        None,  # 45
        None,  # 46
        None,  # 47
        None,  # 48
        None,  # 49
        (50, TType.STRING, 'groupItemsSort', 'UTF8', "score", ),  # 50
        None,  # 51
        None,  # 52
        None,  # 53
        None,  # 54
        None,  # 55
        None,  # 56
        None,  # 57
        None,  # 58
        None,  # 59
        (60, TType.BOOL, 'groupItemsSortAscending', None, False, ),  # 60
        None,  # 61
        None,  # 62
        None,  # 63
        None,  # 64
        None,  # 65
        None,  # 66
        None,  # 67
        None,  # 68
        None,  # 69
        (70, TType.BOOL, 'hitsGroupsAsHits', None, False, ),  # 70
    )

    def __init__(self, indexId=None, language=None, queryText=None, filters=None, orFilters=None, facetRequests=None, sortFields=None, offset=None, hitCount=None, returnFields=None, groupBy=None, groupFacets=thrift_spec[30][4], groupItemsCount=thrift_spec[40][4], groupItemsSort=thrift_spec[50][4], groupItemsSortAscending=thrift_spec[60][4], hitsGroupsAsHits=thrift_spec[70][4],):
        self.indexId = indexId
        self.language = language
        self.queryText = queryText
        self.filters = filters
        self.orFilters = orFilters
        self.facetRequests = facetRequests
        self.sortFields = sortFields
        self.offset = offset
        self.hitCount = hitCount
        self.returnFields = returnFields
        self.groupBy = groupBy
        self.groupFacets = groupFacets
        self.groupItemsCount = groupItemsCount
        self.groupItemsSort = groupItemsSort
        self.groupItemsSortAscending = groupItemsSortAscending
        self.hitsGroupsAsHits = hitsGroupsAsHits

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.indexId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.queryText = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.filters = []
                    (_etype40, _size37) = iprot.readListBegin()
                    for _i41 in range(_size37):
                        _elem42 = Filter()
                        _elem42.read(iprot)
                        self.filters.append(_elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.orFilters = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.facetRequests = []
                    (_etype46, _size43) = iprot.readListBegin()
                    for _i47 in range(_size43):
                        _elem48 = FacetRequest()
                        _elem48.read(iprot)
                        self.facetRequests.append(_elem48)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.sortFields = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = SortField()
                        _elem54.read(iprot)
                        self.sortFields.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.offset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.hitCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.returnFields = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.returnFields.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.groupBy = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BOOL:
                    self.groupFacets = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.I32:
                    self.groupItemsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.groupItemsSort = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.BOOL:
                    self.groupItemsSortAscending = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.BOOL:
                    self.hitsGroupsAsHits = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimpleSearchQuery')
        if self.indexId is not None:
            oprot.writeFieldBegin('indexId', TType.STRING, 1)
            oprot.writeString(self.indexId.encode('utf-8') if sys.version_info[0] == 2 else self.indexId)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 2)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        if self.queryText is not None:
            oprot.writeFieldBegin('queryText', TType.STRING, 3)
            oprot.writeString(self.queryText.encode('utf-8') if sys.version_info[0] == 2 else self.queryText)
            oprot.writeFieldEnd()
        if self.filters is not None:
            oprot.writeFieldBegin('filters', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.filters))
            for iter61 in self.filters:
                iter61.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.orFilters is not None:
            oprot.writeFieldBegin('orFilters', TType.BOOL, 5)
            oprot.writeBool(self.orFilters)
            oprot.writeFieldEnd()
        if self.facetRequests is not None:
            oprot.writeFieldBegin('facetRequests', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.facetRequests))
            for iter62 in self.facetRequests:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sortFields is not None:
            oprot.writeFieldBegin('sortFields', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.sortFields))
            for iter63 in self.sortFields:
                iter63.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I64, 8)
            oprot.writeI64(self.offset)
            oprot.writeFieldEnd()
        if self.hitCount is not None:
            oprot.writeFieldBegin('hitCount', TType.I32, 9)
            oprot.writeI32(self.hitCount)
            oprot.writeFieldEnd()
        if self.returnFields is not None:
            oprot.writeFieldBegin('returnFields', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.returnFields))
            for iter64 in self.returnFields:
                oprot.writeString(iter64.encode('utf-8') if sys.version_info[0] == 2 else iter64)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.groupBy is not None:
            oprot.writeFieldBegin('groupBy', TType.STRING, 20)
            oprot.writeString(self.groupBy.encode('utf-8') if sys.version_info[0] == 2 else self.groupBy)
            oprot.writeFieldEnd()
        if self.groupFacets is not None:
            oprot.writeFieldBegin('groupFacets', TType.BOOL, 30)
            oprot.writeBool(self.groupFacets)
            oprot.writeFieldEnd()
        if self.groupItemsCount is not None:
            oprot.writeFieldBegin('groupItemsCount', TType.I32, 40)
            oprot.writeI32(self.groupItemsCount)
            oprot.writeFieldEnd()
        if self.groupItemsSort is not None:
            oprot.writeFieldBegin('groupItemsSort', TType.STRING, 50)
            oprot.writeString(self.groupItemsSort.encode('utf-8') if sys.version_info[0] == 2 else self.groupItemsSort)
            oprot.writeFieldEnd()
        if self.groupItemsSortAscending is not None:
            oprot.writeFieldBegin('groupItemsSortAscending', TType.BOOL, 60)
            oprot.writeBool(self.groupItemsSortAscending)
            oprot.writeFieldEnd()
        if self.hitsGroupsAsHits is not None:
            oprot.writeFieldBegin('hitsGroupsAsHits', TType.BOOL, 70)
            oprot.writeBool(self.hitsGroupsAsHits)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextItem(object):
    """
    <dl>
    <dt>indexId</dt>
    <dd>id of the index to fetch context item data from</dd>

    <dt>fieldName</dt>
    <dd>the field name of the item's unique identifier within the items index</dd>
    <dd>for example: 'sku' for items 'products'</dd>

    <dt>contextItemId</dt>
    <dd>actual item's identifier</dd>
    <dd>for example: actual sku of the product</dd>

    <dt>role</dt>
    <dd>role of the item within the context, used to address the item in the
    recommendation script.</dd>
    <dd>for example: 'main product' for recommendations within product detail
    page</dd>
    </dl>

    Attributes:
     - indexId
     - fieldName
     - contextItemId
     - role
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'indexId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'fieldName', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'contextItemId', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'role', 'UTF8', None, ),  # 4
    )

    def __init__(self, indexId=None, fieldName=None, contextItemId=None, role=None,):
        self.indexId = indexId
        self.fieldName = fieldName
        self.contextItemId = contextItemId
        self.role = role

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.indexId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fieldName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.contextItemId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.role = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ContextItem')
        if self.indexId is not None:
            oprot.writeFieldBegin('indexId', TType.STRING, 1)
            oprot.writeString(self.indexId.encode('utf-8') if sys.version_info[0] == 2 else self.indexId)
            oprot.writeFieldEnd()
        if self.fieldName is not None:
            oprot.writeFieldBegin('fieldName', TType.STRING, 2)
            oprot.writeString(self.fieldName.encode('utf-8') if sys.version_info[0] == 2 else self.fieldName)
            oprot.writeFieldEnd()
        if self.contextItemId is not None:
            oprot.writeFieldBegin('contextItemId', TType.STRING, 3)
            oprot.writeString(self.contextItemId.encode('utf-8') if sys.version_info[0] == 2 else self.contextItemId)
            oprot.writeFieldEnd()
        if self.role is not None:
            oprot.writeFieldBegin('role', TType.STRING, 4)
            oprot.writeString(self.role.encode('utf-8') if sys.version_info[0] == 2 else self.role)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChoiceInquiry(object):
    """
    <dl>
    <dt>choiceId</dt>
    <dd>personalization choice identificator</dd>

    <dt>simpleSearchQuery</dt>
    <dd>search query in a case of recommendation and search inquiries</dd>

    <dt>contextItems</dt>
    <dd>context items for recommendations</dd>

    <dt>minHitCount</dt>
    <dd>minimal hit count to return for recommendations.</dd>
    <dd>if higher priority recommendation strategy yields less results, next
    strategy is tried</dd>

    <dt>excludeVariantIds</dt>
    <dd>set of variantIds to be excluded from result, has no effect if null or empty</dd>

    <dt>includeVariantIds</dt>
    <dd>set of variantIds to be included in the result, has no effect if null or empty</dd>

    <dt>scope</dt>
    <dd>choice source to be used</dd>

    <dt>withRelaxation</dt>
    <dd>if search relaxation should be used</dd>
    </dl>

    Attributes:
     - choiceId
     - simpleSearchQuery
     - contextItems
     - minHitCount
     - excludeVariantIds
     - scope
     - withRelaxation
     - withSemanticFiltering
     - includeVariantIds
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'choiceId', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'simpleSearchQuery', (SimpleSearchQuery, SimpleSearchQuery.thrift_spec), None, ),  # 2
        (3, TType.LIST, 'contextItems', (TType.STRUCT, (ContextItem, ContextItem.thrift_spec), False), None, ),  # 3
        (4, TType.I32, 'minHitCount', None, None, ),  # 4
        (5, TType.SET, 'excludeVariantIds', (TType.STRING, 'UTF8', False), None, ),  # 5
        (6, TType.STRING, 'scope', 'UTF8', "system_rec", ),  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        None,  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        None,  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        None,  # 40
        None,  # 41
        None,  # 42
        None,  # 43
        None,  # 44
        None,  # 45
        None,  # 46
        None,  # 47
        None,  # 48
        None,  # 49
        None,  # 50
        None,  # 51
        None,  # 52
        None,  # 53
        None,  # 54
        None,  # 55
        None,  # 56
        None,  # 57
        None,  # 58
        None,  # 59
        None,  # 60
        None,  # 61
        None,  # 62
        None,  # 63
        None,  # 64
        None,  # 65
        None,  # 66
        None,  # 67
        None,  # 68
        None,  # 69
        (70, TType.BOOL, 'withRelaxation', None, False, ),  # 70
        None,  # 71
        None,  # 72
        None,  # 73
        None,  # 74
        None,  # 75
        None,  # 76
        None,  # 77
        None,  # 78
        None,  # 79
        (80, TType.BOOL, 'withSemanticFiltering', None, False, ),  # 80
        None,  # 81
        None,  # 82
        None,  # 83
        None,  # 84
        None,  # 85
        None,  # 86
        None,  # 87
        None,  # 88
        None,  # 89
        (90, TType.SET, 'includeVariantIds', (TType.STRING, 'UTF8', False), None, ),  # 90
    )

    def __init__(self, choiceId=None, simpleSearchQuery=None, contextItems=None, minHitCount=None, excludeVariantIds=None, scope=thrift_spec[6][4], withRelaxation=thrift_spec[70][4], withSemanticFiltering=thrift_spec[80][4], includeVariantIds=None,):
        self.choiceId = choiceId
        self.simpleSearchQuery = simpleSearchQuery
        self.contextItems = contextItems
        self.minHitCount = minHitCount
        self.excludeVariantIds = excludeVariantIds
        self.scope = scope
        self.withRelaxation = withRelaxation
        self.withSemanticFiltering = withSemanticFiltering
        self.includeVariantIds = includeVariantIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.choiceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.simpleSearchQuery = SimpleSearchQuery()
                    self.simpleSearchQuery.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.contextItems = []
                    (_etype68, _size65) = iprot.readListBegin()
                    for _i69 in range(_size65):
                        _elem70 = ContextItem()
                        _elem70.read(iprot)
                        self.contextItems.append(_elem70)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.minHitCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.SET:
                    self.excludeVariantIds = set()
                    (_etype74, _size71) = iprot.readSetBegin()
                    for _i75 in range(_size71):
                        _elem76 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.excludeVariantIds.add(_elem76)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.scope = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.BOOL:
                    self.withRelaxation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 80:
                if ftype == TType.BOOL:
                    self.withSemanticFiltering = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 90:
                if ftype == TType.SET:
                    self.includeVariantIds = set()
                    (_etype80, _size77) = iprot.readSetBegin()
                    for _i81 in range(_size77):
                        _elem82 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.includeVariantIds.add(_elem82)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ChoiceInquiry')
        if self.choiceId is not None:
            oprot.writeFieldBegin('choiceId', TType.STRING, 1)
            oprot.writeString(self.choiceId.encode('utf-8') if sys.version_info[0] == 2 else self.choiceId)
            oprot.writeFieldEnd()
        if self.simpleSearchQuery is not None:
            oprot.writeFieldBegin('simpleSearchQuery', TType.STRUCT, 2)
            self.simpleSearchQuery.write(oprot)
            oprot.writeFieldEnd()
        if self.contextItems is not None:
            oprot.writeFieldBegin('contextItems', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.contextItems))
            for iter83 in self.contextItems:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.minHitCount is not None:
            oprot.writeFieldBegin('minHitCount', TType.I32, 4)
            oprot.writeI32(self.minHitCount)
            oprot.writeFieldEnd()
        if self.excludeVariantIds is not None:
            oprot.writeFieldBegin('excludeVariantIds', TType.SET, 5)
            oprot.writeSetBegin(TType.STRING, len(self.excludeVariantIds))
            for iter84 in self.excludeVariantIds:
                oprot.writeString(iter84.encode('utf-8') if sys.version_info[0] == 2 else iter84)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.scope is not None:
            oprot.writeFieldBegin('scope', TType.STRING, 6)
            oprot.writeString(self.scope.encode('utf-8') if sys.version_info[0] == 2 else self.scope)
            oprot.writeFieldEnd()
        if self.withRelaxation is not None:
            oprot.writeFieldBegin('withRelaxation', TType.BOOL, 70)
            oprot.writeBool(self.withRelaxation)
            oprot.writeFieldEnd()
        if self.withSemanticFiltering is not None:
            oprot.writeFieldBegin('withSemanticFiltering', TType.BOOL, 80)
            oprot.writeBool(self.withSemanticFiltering)
            oprot.writeFieldEnd()
        if self.includeVariantIds is not None:
            oprot.writeFieldBegin('includeVariantIds', TType.SET, 90)
            oprot.writeSetBegin(TType.STRING, len(self.includeVariantIds))
            for iter85 in self.includeVariantIds:
                oprot.writeString(iter85.encode('utf-8') if sys.version_info[0] == 2 else iter85)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RequestContext(object):
    """
    parameters of request context. Usually browser, platform, etc.

    Attributes:
     - parameters
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'parameters', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 1
    )

    def __init__(self, parameters=None,):
        self.parameters = parameters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.parameters = {}
                    (_ktype87, _vtype88, _size86) = iprot.readMapBegin()
                    for _i90 in range(_size86):
                        _key91 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val92 = []
                        (_etype96, _size93) = iprot.readListBegin()
                        for _i97 in range(_size93):
                            _elem98 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val92.append(_elem98)
                        iprot.readListEnd()
                        self.parameters[_key91] = _val92
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RequestContext')
        if self.parameters is not None:
            oprot.writeFieldBegin('parameters', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.parameters))
            for kiter99, viter100 in self.parameters.items():
                oprot.writeString(kiter99.encode('utf-8') if sys.version_info[0] == 2 else kiter99)
                oprot.writeListBegin(TType.STRING, len(viter100))
                for iter101 in viter100:
                    oprot.writeString(iter101.encode('utf-8') if sys.version_info[0] == 2 else iter101)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserRecord(object):
    """
    unique identifier of the customer

    Attributes:
     - username
     - apiKey
     - apiSecret
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'username', 'UTF8', None, ),  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        (10, TType.STRING, 'apiKey', 'UTF8', None, ),  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        (20, TType.STRING, 'apiSecret', 'UTF8', None, ),  # 20
    )

    def __init__(self, username=None, apiKey=None, apiSecret=None,):
        self.username = username
        self.apiKey = apiKey
        self.apiSecret = apiSecret

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.apiKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.apiSecret = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserRecord')
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 1)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.apiKey is not None:
            oprot.writeFieldBegin('apiKey', TType.STRING, 10)
            oprot.writeString(self.apiKey.encode('utf-8') if sys.version_info[0] == 2 else self.apiKey)
            oprot.writeFieldEnd()
        if self.apiSecret is not None:
            oprot.writeFieldBegin('apiSecret', TType.STRING, 20)
            oprot.writeString(self.apiSecret.encode('utf-8') if sys.version_info[0] == 2 else self.apiSecret)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChoiceRequest(object):
    """
    <dl>
    <dt>profileId</dt>
    <dd>profile (visitor) identificator</dd>

    <dt>inquiries</dt>
    <dd>list of inquiries to be executed sequentially.</dd>
    <dd>Inquiries with higher index may depend from those with lower index.</dd>

    <dt>requestContext</dt>
    <dd>context of the request</dd>
    </dl>

    Attributes:
     - userRecord
     - profileId
     - inquiries
     - requestContext
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'userRecord', (UserRecord, UserRecord.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'profileId', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'inquiries', (TType.STRUCT, (ChoiceInquiry, ChoiceInquiry.thrift_spec), False), None, ),  # 3
        (4, TType.STRUCT, 'requestContext', (RequestContext, RequestContext.thrift_spec), None, ),  # 4
    )

    def __init__(self, userRecord=None, profileId=None, inquiries=None, requestContext=None,):
        self.userRecord = userRecord
        self.profileId = profileId
        self.inquiries = inquiries
        self.requestContext = requestContext

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.userRecord = UserRecord()
                    self.userRecord.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.profileId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.inquiries = []
                    (_etype105, _size102) = iprot.readListBegin()
                    for _i106 in range(_size102):
                        _elem107 = ChoiceInquiry()
                        _elem107.read(iprot)
                        self.inquiries.append(_elem107)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.requestContext = RequestContext()
                    self.requestContext.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ChoiceRequest')
        if self.userRecord is not None:
            oprot.writeFieldBegin('userRecord', TType.STRUCT, 1)
            self.userRecord.write(oprot)
            oprot.writeFieldEnd()
        if self.profileId is not None:
            oprot.writeFieldBegin('profileId', TType.STRING, 2)
            oprot.writeString(self.profileId.encode('utf-8') if sys.version_info[0] == 2 else self.profileId)
            oprot.writeFieldEnd()
        if self.inquiries is not None:
            oprot.writeFieldBegin('inquiries', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.inquiries))
            for iter108 in self.inquiries:
                iter108.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.requestContext is not None:
            oprot.writeFieldBegin('requestContext', TType.STRUCT, 4)
            self.requestContext.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FacetResponse(object):
    """
    <dl>
    <dt>fieldName</dt>
    <dd>name of the facet field</dd>

    <dt>values</dt>
    <dd>list of facet values</dd>
    </dl>

    Attributes:
     - fieldName
     - values
     - evaluate
     - display
     - numerical
     - range
     - sortOrder
     - sortAscending
     - andSelectedValues
     - boundsOnly
     - extraInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'fieldName', 'UTF8', None, ),  # 1
        (2, TType.LIST, 'values', (TType.STRUCT, (FacetValue, FacetValue.thrift_spec), False), None, ),  # 2
        (3, TType.BOOL, 'evaluate', None, None, ),  # 3
        (4, TType.STRING, 'display', 'UTF8', None, ),  # 4
        (5, TType.BOOL, 'numerical', None, None, ),  # 5
        (6, TType.BOOL, 'range', None, None, ),  # 6
        (7, TType.I32, 'sortOrder', None, None, ),  # 7
        (8, TType.BOOL, 'sortAscending', None, None, ),  # 8
        (9, TType.BOOL, 'andSelectedValues', None, None, ),  # 9
        (10, TType.BOOL, 'boundsOnly', None, None, ),  # 10
        (11, TType.MAP, 'extraInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 11
    )

    def __init__(self, fieldName=None, values=None, evaluate=None, display=None, numerical=None, range=None, sortOrder=None, sortAscending=None, andSelectedValues=None, boundsOnly=None, extraInfo=None,):
        self.fieldName = fieldName
        self.values = values
        self.evaluate = evaluate
        self.display = display
        self.numerical = numerical
        self.range = range
        self.sortOrder = sortOrder
        self.sortAscending = sortAscending
        self.andSelectedValues = andSelectedValues
        self.boundsOnly = boundsOnly
        self.extraInfo = extraInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fieldName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype112, _size109) = iprot.readListBegin()
                    for _i113 in range(_size109):
                        _elem114 = FacetValue()
                        _elem114.read(iprot)
                        self.values.append(_elem114)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.evaluate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.numerical = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.range = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.sortOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.sortAscending = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.andSelectedValues = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.boundsOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.extraInfo = {}
                    (_ktype116, _vtype117, _size115) = iprot.readMapBegin()
                    for _i119 in range(_size115):
                        _key120 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val121 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.extraInfo[_key120] = _val121
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FacetResponse')
        if self.fieldName is not None:
            oprot.writeFieldBegin('fieldName', TType.STRING, 1)
            oprot.writeString(self.fieldName.encode('utf-8') if sys.version_info[0] == 2 else self.fieldName)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.values))
            for iter122 in self.values:
                iter122.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.evaluate is not None:
            oprot.writeFieldBegin('evaluate', TType.BOOL, 3)
            oprot.writeBool(self.evaluate)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 4)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.numerical is not None:
            oprot.writeFieldBegin('numerical', TType.BOOL, 5)
            oprot.writeBool(self.numerical)
            oprot.writeFieldEnd()
        if self.range is not None:
            oprot.writeFieldBegin('range', TType.BOOL, 6)
            oprot.writeBool(self.range)
            oprot.writeFieldEnd()
        if self.sortOrder is not None:
            oprot.writeFieldBegin('sortOrder', TType.I32, 7)
            oprot.writeI32(self.sortOrder)
            oprot.writeFieldEnd()
        if self.sortAscending is not None:
            oprot.writeFieldBegin('sortAscending', TType.BOOL, 8)
            oprot.writeBool(self.sortAscending)
            oprot.writeFieldEnd()
        if self.andSelectedValues is not None:
            oprot.writeFieldBegin('andSelectedValues', TType.BOOL, 9)
            oprot.writeBool(self.andSelectedValues)
            oprot.writeFieldEnd()
        if self.boundsOnly is not None:
            oprot.writeFieldBegin('boundsOnly', TType.BOOL, 10)
            oprot.writeBool(self.boundsOnly)
            oprot.writeFieldEnd()
        if self.extraInfo is not None:
            oprot.writeFieldBegin('extraInfo', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extraInfo))
            for kiter123, viter124 in self.extraInfo.items():
                oprot.writeString(kiter123.encode('utf-8') if sys.version_info[0] == 2 else kiter123)
                oprot.writeString(viter124.encode('utf-8') if sys.version_info[0] == 2 else viter124)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Hit(object):
    """
    item found

    <dl>
    <dt>values</dt>
    <dd>map containing name of the field and list of values as strings</dd>
    <dd>if index contains no value for a field, empty array will be returned.</dd>

    <dt>score</dt>
    <dd>index score of the hit</dd>

    <dt>scenarioId</dt>
    <dd>source scenarioId in case of mixed recommendations modes</dd>
    </dl>

    Attributes:
     - values
     - score
     - scenarioId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'values', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 1
        (2, TType.DOUBLE, 'score', None, None, ),  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        None,  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        (30, TType.STRING, 'scenarioId', 'UTF8', None, ),  # 30
    )

    def __init__(self, values=None, score=None, scenarioId=None,):
        self.values = values
        self.score = score
        self.scenarioId = scenarioId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.values = {}
                    (_ktype126, _vtype127, _size125) = iprot.readMapBegin()
                    for _i129 in range(_size125):
                        _key130 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val131 = []
                        (_etype135, _size132) = iprot.readListBegin()
                        for _i136 in range(_size132):
                            _elem137 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val131.append(_elem137)
                        iprot.readListEnd()
                        self.values[_key130] = _val131
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.score = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.scenarioId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Hit')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.values))
            for kiter138, viter139 in self.values.items():
                oprot.writeString(kiter138.encode('utf-8') if sys.version_info[0] == 2 else kiter138)
                oprot.writeListBegin(TType.STRING, len(viter139))
                for iter140 in viter139:
                    oprot.writeString(iter140.encode('utf-8') if sys.version_info[0] == 2 else iter140)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.score is not None:
            oprot.writeFieldBegin('score', TType.DOUBLE, 2)
            oprot.writeDouble(self.score)
            oprot.writeFieldEnd()
        if self.scenarioId is not None:
            oprot.writeFieldBegin('scenarioId', TType.STRING, 30)
            oprot.writeString(self.scenarioId.encode('utf-8') if sys.version_info[0] == 2 else self.scenarioId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HitsGroup(object):
    """
    grouped item found

    <dl>
    <dt>groupValue</dt>
    <dd>value of the groupBy field</dd>

    <dt>totalHitCount</dt>
    <dd>total hits count within the group</dd>

    <dt>hits</dt>
    <dd>group hits</dd>
    </dl>

    Attributes:
     - groupValue
     - totalHitCount
     - hits
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        (10, TType.STRING, 'groupValue', 'UTF8', None, ),  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        (20, TType.I64, 'totalHitCount', None, None, ),  # 20
        None,  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        (30, TType.LIST, 'hits', (TType.STRUCT, (Hit, Hit.thrift_spec), False), None, ),  # 30
    )

    def __init__(self, groupValue=None, totalHitCount=None, hits=None,):
        self.groupValue = groupValue
        self.totalHitCount = totalHitCount
        self.hits = hits

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 10:
                if ftype == TType.STRING:
                    self.groupValue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I64:
                    self.totalHitCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.LIST:
                    self.hits = []
                    (_etype144, _size141) = iprot.readListBegin()
                    for _i145 in range(_size141):
                        _elem146 = Hit()
                        _elem146.read(iprot)
                        self.hits.append(_elem146)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HitsGroup')
        if self.groupValue is not None:
            oprot.writeFieldBegin('groupValue', TType.STRING, 10)
            oprot.writeString(self.groupValue.encode('utf-8') if sys.version_info[0] == 2 else self.groupValue)
            oprot.writeFieldEnd()
        if self.totalHitCount is not None:
            oprot.writeFieldBegin('totalHitCount', TType.I64, 20)
            oprot.writeI64(self.totalHitCount)
            oprot.writeFieldEnd()
        if self.hits is not None:
            oprot.writeFieldBegin('hits', TType.LIST, 30)
            oprot.writeListBegin(TType.STRUCT, len(self.hits))
            for iter147 in self.hits:
                iter147.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SearchResult(object):
    """
    <dl>
    <dt>hits</dt>
    <dd>list of hits found for given SimpleSearchQuery</dd>

    <dt>facetResponses</dt>
    <dd>list of requested facets or null if none requested</dd>

    <dt>totalHitCount</dt>
    <dd>total number of hits; -1 in case of mixed recommendation strategy</dd>

    <dt>queryText</dt>
    <dd>relaxation query text for relaxation results or requested queryText for a
    regular SearchResult</dd>

    <dt>hitsGroups</dt>
    <dd>grouped hits; not null when corresponding SimplSearchQuery has
    groupBy!=null </dd>
    </dl>

    Attributes:
     - hits
     - facetResponses
     - totalHitCount
     - queryText
     - hitsGroups
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'hits', (TType.STRUCT, (Hit, Hit.thrift_spec), False), None, ),  # 1
        (2, TType.LIST, 'facetResponses', (TType.STRUCT, (FacetResponse, FacetResponse.thrift_spec), False), None, ),  # 2
        (3, TType.I64, 'totalHitCount', None, None, ),  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        None,  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        None,  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        (40, TType.STRING, 'queryText', 'UTF8', None, ),  # 40
        None,  # 41
        None,  # 42
        None,  # 43
        None,  # 44
        None,  # 45
        None,  # 46
        None,  # 47
        None,  # 48
        None,  # 49
        (50, TType.LIST, 'hitsGroups', (TType.STRUCT, (HitsGroup, HitsGroup.thrift_spec), False), None, ),  # 50
    )

    def __init__(self, hits=None, facetResponses=None, totalHitCount=None, queryText=None, hitsGroups=None,):
        self.hits = hits
        self.facetResponses = facetResponses
        self.totalHitCount = totalHitCount
        self.queryText = queryText
        self.hitsGroups = hitsGroups

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.hits = []
                    (_etype151, _size148) = iprot.readListBegin()
                    for _i152 in range(_size148):
                        _elem153 = Hit()
                        _elem153.read(iprot)
                        self.hits.append(_elem153)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.facetResponses = []
                    (_etype157, _size154) = iprot.readListBegin()
                    for _i158 in range(_size154):
                        _elem159 = FacetResponse()
                        _elem159.read(iprot)
                        self.facetResponses.append(_elem159)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.totalHitCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRING:
                    self.queryText = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.LIST:
                    self.hitsGroups = []
                    (_etype163, _size160) = iprot.readListBegin()
                    for _i164 in range(_size160):
                        _elem165 = HitsGroup()
                        _elem165.read(iprot)
                        self.hitsGroups.append(_elem165)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SearchResult')
        if self.hits is not None:
            oprot.writeFieldBegin('hits', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.hits))
            for iter166 in self.hits:
                iter166.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.facetResponses is not None:
            oprot.writeFieldBegin('facetResponses', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.facetResponses))
            for iter167 in self.facetResponses:
                iter167.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.totalHitCount is not None:
            oprot.writeFieldBegin('totalHitCount', TType.I64, 3)
            oprot.writeI64(self.totalHitCount)
            oprot.writeFieldEnd()
        if self.queryText is not None:
            oprot.writeFieldBegin('queryText', TType.STRING, 40)
            oprot.writeString(self.queryText.encode('utf-8') if sys.version_info[0] == 2 else self.queryText)
            oprot.writeFieldEnd()
        if self.hitsGroups is not None:
            oprot.writeFieldBegin('hitsGroups', TType.LIST, 50)
            oprot.writeListBegin(TType.STRUCT, len(self.hitsGroups))
            for iter168 in self.hitsGroups:
                iter168.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SearchRelaxation(object):
    """
    Attributes:
     - suggestionsResults
     - subphrasesResults
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        (10, TType.LIST, 'suggestionsResults', (TType.STRUCT, (SearchResult, SearchResult.thrift_spec), False), None, ),  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        (20, TType.LIST, 'subphrasesResults', (TType.STRUCT, (SearchResult, SearchResult.thrift_spec), False), None, ),  # 20
    )

    def __init__(self, suggestionsResults=None, subphrasesResults=None,):
        self.suggestionsResults = suggestionsResults
        self.subphrasesResults = subphrasesResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 10:
                if ftype == TType.LIST:
                    self.suggestionsResults = []
                    (_etype172, _size169) = iprot.readListBegin()
                    for _i173 in range(_size169):
                        _elem174 = SearchResult()
                        _elem174.read(iprot)
                        self.suggestionsResults.append(_elem174)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.subphrasesResults = []
                    (_etype178, _size175) = iprot.readListBegin()
                    for _i179 in range(_size175):
                        _elem180 = SearchResult()
                        _elem180.read(iprot)
                        self.subphrasesResults.append(_elem180)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SearchRelaxation')
        if self.suggestionsResults is not None:
            oprot.writeFieldBegin('suggestionsResults', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.suggestionsResults))
            for iter181 in self.suggestionsResults:
                iter181.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.subphrasesResults is not None:
            oprot.writeFieldBegin('subphrasesResults', TType.LIST, 20)
            oprot.writeListBegin(TType.STRUCT, len(self.subphrasesResults))
            for iter182 in self.subphrasesResults:
                iter182.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Variant(object):
    """
    <dl>
    <dt>variantId</dt>
    <dd>id of the personalized variant</dd>

    <dt>scenarioId</dt>
    <dd>scenario identificator used to produce recommendation result or search
    result personalization</dd>

    <dt>searchResult</dt>
    <dd>result of the search request for recommendations and search requests</dd>

    <dt>searchResultTitle</dt>
    <dd>recommendation's result title localized in language requested in
    corresponding SimpleSearchQuery</dd>

    <dt>searchRelaxation</dt>
    <dd>When the service considers queryText invalid, it will evaluate and return
    relaxations if it is requested in corresponding ChoiceInquiry and if
    relaxations could be found.</dd>
    <dd>Note that original query still could yield some results; it is up to the
    client to decide whether searchRelaxations should be used (with displaying
    appropriate message) or not.</dd>
    </dl>

    Attributes:
     - variantId
     - scenarioId
     - searchResult
     - searchResultTitle
     - searchRelaxation
     - semanticFilteringResults
     - extraInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'variantId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'scenarioId', 'UTF8', None, ),  # 2
        (3, TType.STRUCT, 'searchResult', (SearchResult, SearchResult.thrift_spec), None, ),  # 3
        (4, TType.STRING, 'searchResultTitle', 'UTF8', None, ),  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        None,  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        None,  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        None,  # 40
        None,  # 41
        None,  # 42
        None,  # 43
        None,  # 44
        None,  # 45
        None,  # 46
        None,  # 47
        None,  # 48
        None,  # 49
        (50, TType.STRUCT, 'searchRelaxation', (SearchRelaxation, SearchRelaxation.thrift_spec), None, ),  # 50
        None,  # 51
        None,  # 52
        None,  # 53
        None,  # 54
        None,  # 55
        None,  # 56
        None,  # 57
        None,  # 58
        None,  # 59
        (60, TType.LIST, 'semanticFilteringResults', (TType.STRUCT, (SearchResult, SearchResult.thrift_spec), False), None, ),  # 60
        None,  # 61
        None,  # 62
        None,  # 63
        None,  # 64
        None,  # 65
        None,  # 66
        None,  # 67
        None,  # 68
        None,  # 69
        (70, TType.MAP, 'extraInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 70
    )

    def __init__(self, variantId=None, scenarioId=None, searchResult=None, searchResultTitle=None, searchRelaxation=None, semanticFilteringResults=None, extraInfo=None,):
        self.variantId = variantId
        self.scenarioId = scenarioId
        self.searchResult = searchResult
        self.searchResultTitle = searchResultTitle
        self.searchRelaxation = searchRelaxation
        self.semanticFilteringResults = semanticFilteringResults
        self.extraInfo = extraInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.variantId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.scenarioId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.searchResult = SearchResult()
                    self.searchResult.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.searchResultTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRUCT:
                    self.searchRelaxation = SearchRelaxation()
                    self.searchRelaxation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.LIST:
                    self.semanticFilteringResults = []
                    (_etype186, _size183) = iprot.readListBegin()
                    for _i187 in range(_size183):
                        _elem188 = SearchResult()
                        _elem188.read(iprot)
                        self.semanticFilteringResults.append(_elem188)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.MAP:
                    self.extraInfo = {}
                    (_ktype190, _vtype191, _size189) = iprot.readMapBegin()
                    for _i193 in range(_size189):
                        _key194 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val195 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.extraInfo[_key194] = _val195
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Variant')
        if self.variantId is not None:
            oprot.writeFieldBegin('variantId', TType.STRING, 1)
            oprot.writeString(self.variantId.encode('utf-8') if sys.version_info[0] == 2 else self.variantId)
            oprot.writeFieldEnd()
        if self.scenarioId is not None:
            oprot.writeFieldBegin('scenarioId', TType.STRING, 2)
            oprot.writeString(self.scenarioId.encode('utf-8') if sys.version_info[0] == 2 else self.scenarioId)
            oprot.writeFieldEnd()
        if self.searchResult is not None:
            oprot.writeFieldBegin('searchResult', TType.STRUCT, 3)
            self.searchResult.write(oprot)
            oprot.writeFieldEnd()
        if self.searchResultTitle is not None:
            oprot.writeFieldBegin('searchResultTitle', TType.STRING, 4)
            oprot.writeString(self.searchResultTitle.encode('utf-8') if sys.version_info[0] == 2 else self.searchResultTitle)
            oprot.writeFieldEnd()
        if self.searchRelaxation is not None:
            oprot.writeFieldBegin('searchRelaxation', TType.STRUCT, 50)
            self.searchRelaxation.write(oprot)
            oprot.writeFieldEnd()
        if self.semanticFilteringResults is not None:
            oprot.writeFieldBegin('semanticFilteringResults', TType.LIST, 60)
            oprot.writeListBegin(TType.STRUCT, len(self.semanticFilteringResults))
            for iter196 in self.semanticFilteringResults:
                iter196.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.extraInfo is not None:
            oprot.writeFieldBegin('extraInfo', TType.MAP, 70)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extraInfo))
            for kiter197, viter198 in self.extraInfo.items():
                oprot.writeString(kiter197.encode('utf-8') if sys.version_info[0] == 2 else kiter197)
                oprot.writeString(viter198.encode('utf-8') if sys.version_info[0] == 2 else viter198)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChoiceResponse(object):
    """
    list of personalized variants. Item's index corresponds to the index of the
    ChoiceInquiry

    Attributes:
     - variants
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'variants', (TType.STRUCT, (Variant, Variant.thrift_spec), False), None, ),  # 1
    )

    def __init__(self, variants=None,):
        self.variants = variants

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.variants = []
                    (_etype202, _size199) = iprot.readListBegin()
                    for _i203 in range(_size199):
                        _elem204 = Variant()
                        _elem204.read(iprot)
                        self.variants.append(_elem204)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ChoiceResponse')
        if self.variants is not None:
            oprot.writeFieldBegin('variants', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.variants))
            for iter205 in self.variants:
                iter205.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilePropertyValue(object):
    """
    Attributes:
     - profileId
     - propertyName
     - propertyValue
     - confidence
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'profileId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'propertyName', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'propertyValue', 'UTF8', None, ),  # 3
        (4, TType.I32, 'confidence', None, None, ),  # 4
    )

    def __init__(self, profileId=None, propertyName=None, propertyValue=None, confidence=None,):
        self.profileId = profileId
        self.propertyName = propertyName
        self.propertyValue = propertyValue
        self.confidence = confidence

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.profileId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.propertyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.propertyValue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.confidence = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ProfilePropertyValue')
        if self.profileId is not None:
            oprot.writeFieldBegin('profileId', TType.STRING, 1)
            oprot.writeString(self.profileId.encode('utf-8') if sys.version_info[0] == 2 else self.profileId)
            oprot.writeFieldEnd()
        if self.propertyName is not None:
            oprot.writeFieldBegin('propertyName', TType.STRING, 2)
            oprot.writeString(self.propertyName.encode('utf-8') if sys.version_info[0] == 2 else self.propertyName)
            oprot.writeFieldEnd()
        if self.propertyValue is not None:
            oprot.writeFieldBegin('propertyValue', TType.STRING, 3)
            oprot.writeString(self.propertyValue.encode('utf-8') if sys.version_info[0] == 2 else self.propertyValue)
            oprot.writeFieldEnd()
        if self.confidence is not None:
            oprot.writeFieldBegin('confidence', TType.I32, 4)
            oprot.writeI32(self.confidence)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfileContext(object):
    """
    Attributes:
     - profileId
     - requestContext
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'profileId', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'requestContext', (RequestContext, RequestContext.thrift_spec), None, ),  # 2
    )

    def __init__(self, profileId=None, requestContext=None,):
        self.profileId = profileId
        self.requestContext = requestContext

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.profileId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.requestContext = RequestContext()
                    self.requestContext.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ProfileContext')
        if self.profileId is not None:
            oprot.writeFieldBegin('profileId', TType.STRING, 1)
            oprot.writeString(self.profileId.encode('utf-8') if sys.version_info[0] == 2 else self.profileId)
            oprot.writeFieldEnd()
        if self.requestContext is not None:
            oprot.writeFieldBegin('requestContext', TType.STRUCT, 2)
            self.requestContext.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BatchChoiceRequest(object):
    """
    <dl>
    <dt>choiceInquiry</dt>
    <dd><b>deprecated</b> - use choiceInquiries instead.</dd>
    <dd>If choiceInquiries is given this field will be ignored</dd>

    <dt>choiceInquiries</dt>
    <dd>list of ChoiceInquiries to be executed sequentially.</dd>
    <dd>Note that list items can depend of items before in list</dd>

    <dt>requestContext</dt>
    <dd><b>deprecated</b> - use profileContexts instead.</dd>

    <dt>profileIds</dt>
    <dd><b>deprecated</b> - use profileContexts instead.</dd>
    </dl>

    Attributes:
     - userRecord
     - choiceInquiry
     - requestContext
     - profileIds
     - choiceInquiries
     - profileContexts
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'userRecord', (UserRecord, UserRecord.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'choiceInquiry', (ChoiceInquiry, ChoiceInquiry.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'requestContext', (RequestContext, RequestContext.thrift_spec), None, ),  # 3
        (4, TType.LIST, 'profileIds', (TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.LIST, 'choiceInquiries', (TType.STRUCT, (ChoiceInquiry, ChoiceInquiry.thrift_spec), False), None, ),  # 5
        (6, TType.LIST, 'profileContexts', (TType.STRUCT, (ProfileContext, ProfileContext.thrift_spec), False), None, ),  # 6
    )

    def __init__(self, userRecord=None, choiceInquiry=None, requestContext=None, profileIds=None, choiceInquiries=None, profileContexts=None,):
        self.userRecord = userRecord
        self.choiceInquiry = choiceInquiry
        self.requestContext = requestContext
        self.profileIds = profileIds
        self.choiceInquiries = choiceInquiries
        self.profileContexts = profileContexts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.userRecord = UserRecord()
                    self.userRecord.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.choiceInquiry = ChoiceInquiry()
                    self.choiceInquiry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.requestContext = RequestContext()
                    self.requestContext.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.profileIds = []
                    (_etype209, _size206) = iprot.readListBegin()
                    for _i210 in range(_size206):
                        _elem211 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.profileIds.append(_elem211)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.choiceInquiries = []
                    (_etype215, _size212) = iprot.readListBegin()
                    for _i216 in range(_size212):
                        _elem217 = ChoiceInquiry()
                        _elem217.read(iprot)
                        self.choiceInquiries.append(_elem217)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.profileContexts = []
                    (_etype221, _size218) = iprot.readListBegin()
                    for _i222 in range(_size218):
                        _elem223 = ProfileContext()
                        _elem223.read(iprot)
                        self.profileContexts.append(_elem223)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('BatchChoiceRequest')
        if self.userRecord is not None:
            oprot.writeFieldBegin('userRecord', TType.STRUCT, 1)
            self.userRecord.write(oprot)
            oprot.writeFieldEnd()
        if self.choiceInquiry is not None:
            oprot.writeFieldBegin('choiceInquiry', TType.STRUCT, 2)
            self.choiceInquiry.write(oprot)
            oprot.writeFieldEnd()
        if self.requestContext is not None:
            oprot.writeFieldBegin('requestContext', TType.STRUCT, 3)
            self.requestContext.write(oprot)
            oprot.writeFieldEnd()
        if self.profileIds is not None:
            oprot.writeFieldBegin('profileIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.profileIds))
            for iter224 in self.profileIds:
                oprot.writeString(iter224.encode('utf-8') if sys.version_info[0] == 2 else iter224)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.choiceInquiries is not None:
            oprot.writeFieldBegin('choiceInquiries', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.choiceInquiries))
            for iter225 in self.choiceInquiries:
                iter225.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.profileContexts is not None:
            oprot.writeFieldBegin('profileContexts', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.profileContexts))
            for iter226 in self.profileContexts:
                iter226.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BatchChoiceResponse(object):
    """
    <dl>
    <dt>variants</dt>
    <dd><b>deprecated</b> - contains non-null value only if
    corresponding BatchChoiceRequest had only one ChoiceInquiry</dd>

    <dt>selectedVariants</dt>
    <dd>outer list corresponds to profileIds given in BatchChoiceRequest, while
    inner list corresponds to list of ChoiceInquiries from BatchChoiceRequest</dd>
    </dl>

    Attributes:
     - variants
     - selectedVariants
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'variants', (TType.STRUCT, (Variant, Variant.thrift_spec), False), None, ),  # 1
        (2, TType.LIST, 'selectedVariants', (TType.LIST, (TType.STRUCT, (Variant, Variant.thrift_spec), False), False), None, ),  # 2
    )

    def __init__(self, variants=None, selectedVariants=None,):
        self.variants = variants
        self.selectedVariants = selectedVariants

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.variants = []
                    (_etype230, _size227) = iprot.readListBegin()
                    for _i231 in range(_size227):
                        _elem232 = Variant()
                        _elem232.read(iprot)
                        self.variants.append(_elem232)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.selectedVariants = []
                    (_etype236, _size233) = iprot.readListBegin()
                    for _i237 in range(_size233):
                        _elem238 = []
                        (_etype242, _size239) = iprot.readListBegin()
                        for _i243 in range(_size239):
                            _elem244 = Variant()
                            _elem244.read(iprot)
                            _elem238.append(_elem244)
                        iprot.readListEnd()
                        self.selectedVariants.append(_elem238)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('BatchChoiceResponse')
        if self.variants is not None:
            oprot.writeFieldBegin('variants', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.variants))
            for iter245 in self.variants:
                iter245.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.selectedVariants is not None:
            oprot.writeFieldBegin('selectedVariants', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.selectedVariants))
            for iter246 in self.selectedVariants:
                oprot.writeListBegin(TType.STRUCT, len(iter246))
                for iter247 in iter246:
                    iter247.write(oprot)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AutocompleteHit(object):
    """
    Attributes:
     - suggestion
     - highlighted
     - searchResult
     - score
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        (11, TType.STRING, 'suggestion', 'UTF8', None, ),  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        (21, TType.STRING, 'highlighted', 'UTF8', None, ),  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        (31, TType.STRUCT, 'searchResult', (SearchResult, SearchResult.thrift_spec), None, ),  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        None,  # 40
        (41, TType.DOUBLE, 'score', None, None, ),  # 41
    )

    def __init__(self, suggestion=None, highlighted=None, searchResult=None, score=None,):
        self.suggestion = suggestion
        self.highlighted = highlighted
        self.searchResult = searchResult
        self.score = score

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 11:
                if ftype == TType.STRING:
                    self.suggestion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.highlighted = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRUCT:
                    self.searchResult = SearchResult()
                    self.searchResult.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.DOUBLE:
                    self.score = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AutocompleteHit')
        if self.suggestion is not None:
            oprot.writeFieldBegin('suggestion', TType.STRING, 11)
            oprot.writeString(self.suggestion.encode('utf-8') if sys.version_info[0] == 2 else self.suggestion)
            oprot.writeFieldEnd()
        if self.highlighted is not None:
            oprot.writeFieldBegin('highlighted', TType.STRING, 21)
            oprot.writeString(self.highlighted.encode('utf-8') if sys.version_info[0] == 2 else self.highlighted)
            oprot.writeFieldEnd()
        if self.searchResult is not None:
            oprot.writeFieldBegin('searchResult', TType.STRUCT, 31)
            self.searchResult.write(oprot)
            oprot.writeFieldEnd()
        if self.score is not None:
            oprot.writeFieldBegin('score', TType.DOUBLE, 41)
            oprot.writeDouble(self.score)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AutocompleteQuery(object):
    """
    Attributes:
     - indexId
     - language
     - queryText
     - suggestionsHitCount
     - highlight
     - highlightPre
     - highlightPost
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        (11, TType.STRING, 'indexId', 'UTF8', None, ),  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        (21, TType.STRING, 'language', 'UTF8', None, ),  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        (31, TType.STRING, 'queryText', 'UTF8', None, ),  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        None,  # 40
        (41, TType.I32, 'suggestionsHitCount', None, None, ),  # 41
        None,  # 42
        None,  # 43
        None,  # 44
        None,  # 45
        None,  # 46
        None,  # 47
        None,  # 48
        None,  # 49
        None,  # 50
        (51, TType.BOOL, 'highlight', None, None, ),  # 51
        None,  # 52
        None,  # 53
        None,  # 54
        None,  # 55
        None,  # 56
        None,  # 57
        None,  # 58
        None,  # 59
        None,  # 60
        (61, TType.STRING, 'highlightPre', 'UTF8', "<em>", ),  # 61
        None,  # 62
        None,  # 63
        None,  # 64
        None,  # 65
        None,  # 66
        None,  # 67
        None,  # 68
        None,  # 69
        None,  # 70
        (71, TType.STRING, 'highlightPost', 'UTF8', "</em>", ),  # 71
    )

    def __init__(self, indexId=None, language=None, queryText=None, suggestionsHitCount=None, highlight=None, highlightPre=thrift_spec[61][4], highlightPost=thrift_spec[71][4],):
        self.indexId = indexId
        self.language = language
        self.queryText = queryText
        self.suggestionsHitCount = suggestionsHitCount
        self.highlight = highlight
        self.highlightPre = highlightPre
        self.highlightPost = highlightPost

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 11:
                if ftype == TType.STRING:
                    self.indexId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.queryText = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.I32:
                    self.suggestionsHitCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.BOOL:
                    self.highlight = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.STRING:
                    self.highlightPre = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.STRING:
                    self.highlightPost = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AutocompleteQuery')
        if self.indexId is not None:
            oprot.writeFieldBegin('indexId', TType.STRING, 11)
            oprot.writeString(self.indexId.encode('utf-8') if sys.version_info[0] == 2 else self.indexId)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 21)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        if self.queryText is not None:
            oprot.writeFieldBegin('queryText', TType.STRING, 31)
            oprot.writeString(self.queryText.encode('utf-8') if sys.version_info[0] == 2 else self.queryText)
            oprot.writeFieldEnd()
        if self.suggestionsHitCount is not None:
            oprot.writeFieldBegin('suggestionsHitCount', TType.I32, 41)
            oprot.writeI32(self.suggestionsHitCount)
            oprot.writeFieldEnd()
        if self.highlight is not None:
            oprot.writeFieldBegin('highlight', TType.BOOL, 51)
            oprot.writeBool(self.highlight)
            oprot.writeFieldEnd()
        if self.highlightPre is not None:
            oprot.writeFieldBegin('highlightPre', TType.STRING, 61)
            oprot.writeString(self.highlightPre.encode('utf-8') if sys.version_info[0] == 2 else self.highlightPre)
            oprot.writeFieldEnd()
        if self.highlightPost is not None:
            oprot.writeFieldBegin('highlightPost', TType.STRING, 71)
            oprot.writeString(self.highlightPost.encode('utf-8') if sys.version_info[0] == 2 else self.highlightPost)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AutocompleteRequest(object):
    """
    Attributes:
     - userRecord
     - scope
     - choiceId
     - profileId
     - requestContext
     - excludeVariantIds
     - autocompleteQuery
     - searchChoiceId
     - searchQuery
     - includeVariantIds
     - propertyQueries
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        (11, TType.STRUCT, 'userRecord', (UserRecord, UserRecord.thrift_spec), None, ),  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        (21, TType.STRING, 'scope', 'UTF8', "system_rec", ),  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        (31, TType.STRING, 'choiceId', 'UTF8', None, ),  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        None,  # 40
        (41, TType.STRING, 'profileId', 'UTF8', None, ),  # 41
        None,  # 42
        None,  # 43
        None,  # 44
        None,  # 45
        None,  # 46
        None,  # 47
        None,  # 48
        None,  # 49
        None,  # 50
        (51, TType.STRUCT, 'requestContext', (RequestContext, RequestContext.thrift_spec), None, ),  # 51
        None,  # 52
        None,  # 53
        None,  # 54
        None,  # 55
        None,  # 56
        None,  # 57
        None,  # 58
        None,  # 59
        None,  # 60
        (61, TType.SET, 'excludeVariantIds', (TType.STRING, 'UTF8', False), None, ),  # 61
        None,  # 62
        None,  # 63
        None,  # 64
        None,  # 65
        None,  # 66
        None,  # 67
        None,  # 68
        None,  # 69
        None,  # 70
        (71, TType.STRUCT, 'autocompleteQuery', (AutocompleteQuery, AutocompleteQuery.thrift_spec), None, ),  # 71
        None,  # 72
        None,  # 73
        None,  # 74
        None,  # 75
        None,  # 76
        None,  # 77
        None,  # 78
        None,  # 79
        None,  # 80
        (81, TType.STRING, 'searchChoiceId', 'UTF8', None, ),  # 81
        None,  # 82
        None,  # 83
        None,  # 84
        None,  # 85
        None,  # 86
        None,  # 87
        None,  # 88
        None,  # 89
        None,  # 90
        (91, TType.STRUCT, 'searchQuery', (SimpleSearchQuery, SimpleSearchQuery.thrift_spec), None, ),  # 91
        None,  # 92
        None,  # 93
        None,  # 94
        None,  # 95
        None,  # 96
        None,  # 97
        None,  # 98
        None,  # 99
        None,  # 100
        (101, TType.SET, 'includeVariantIds', (TType.STRING, 'UTF8', False), None, ),  # 101
        None,  # 102
        None,  # 103
        None,  # 104
        None,  # 105
        None,  # 106
        None,  # 107
        None,  # 108
        None,  # 109
        (110, TType.LIST, 'propertyQueries', (TType.STRUCT, (PropertyQuery, PropertyQuery.thrift_spec), False), None, ),  # 110
    )

    def __init__(self, userRecord=None, scope=thrift_spec[21][4], choiceId=None, profileId=None, requestContext=None, excludeVariantIds=None, autocompleteQuery=None, searchChoiceId=None, searchQuery=None, includeVariantIds=None, propertyQueries=None,):
        self.userRecord = userRecord
        self.scope = scope
        self.choiceId = choiceId
        self.profileId = profileId
        self.requestContext = requestContext
        self.excludeVariantIds = excludeVariantIds
        self.autocompleteQuery = autocompleteQuery
        self.searchChoiceId = searchChoiceId
        self.searchQuery = searchQuery
        self.includeVariantIds = includeVariantIds
        self.propertyQueries = propertyQueries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 11:
                if ftype == TType.STRUCT:
                    self.userRecord = UserRecord()
                    self.userRecord.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.scope = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.choiceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRING:
                    self.profileId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRUCT:
                    self.requestContext = RequestContext()
                    self.requestContext.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.SET:
                    self.excludeVariantIds = set()
                    (_etype251, _size248) = iprot.readSetBegin()
                    for _i252 in range(_size248):
                        _elem253 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.excludeVariantIds.add(_elem253)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.STRUCT:
                    self.autocompleteQuery = AutocompleteQuery()
                    self.autocompleteQuery.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 81:
                if ftype == TType.STRING:
                    self.searchChoiceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 91:
                if ftype == TType.STRUCT:
                    self.searchQuery = SimpleSearchQuery()
                    self.searchQuery.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 101:
                if ftype == TType.SET:
                    self.includeVariantIds = set()
                    (_etype257, _size254) = iprot.readSetBegin()
                    for _i258 in range(_size254):
                        _elem259 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.includeVariantIds.add(_elem259)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 110:
                if ftype == TType.LIST:
                    self.propertyQueries = []
                    (_etype263, _size260) = iprot.readListBegin()
                    for _i264 in range(_size260):
                        _elem265 = PropertyQuery()
                        _elem265.read(iprot)
                        self.propertyQueries.append(_elem265)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AutocompleteRequest')
        if self.userRecord is not None:
            oprot.writeFieldBegin('userRecord', TType.STRUCT, 11)
            self.userRecord.write(oprot)
            oprot.writeFieldEnd()
        if self.scope is not None:
            oprot.writeFieldBegin('scope', TType.STRING, 21)
            oprot.writeString(self.scope.encode('utf-8') if sys.version_info[0] == 2 else self.scope)
            oprot.writeFieldEnd()
        if self.choiceId is not None:
            oprot.writeFieldBegin('choiceId', TType.STRING, 31)
            oprot.writeString(self.choiceId.encode('utf-8') if sys.version_info[0] == 2 else self.choiceId)
            oprot.writeFieldEnd()
        if self.profileId is not None:
            oprot.writeFieldBegin('profileId', TType.STRING, 41)
            oprot.writeString(self.profileId.encode('utf-8') if sys.version_info[0] == 2 else self.profileId)
            oprot.writeFieldEnd()
        if self.requestContext is not None:
            oprot.writeFieldBegin('requestContext', TType.STRUCT, 51)
            self.requestContext.write(oprot)
            oprot.writeFieldEnd()
        if self.excludeVariantIds is not None:
            oprot.writeFieldBegin('excludeVariantIds', TType.SET, 61)
            oprot.writeSetBegin(TType.STRING, len(self.excludeVariantIds))
            for iter266 in self.excludeVariantIds:
                oprot.writeString(iter266.encode('utf-8') if sys.version_info[0] == 2 else iter266)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.autocompleteQuery is not None:
            oprot.writeFieldBegin('autocompleteQuery', TType.STRUCT, 71)
            self.autocompleteQuery.write(oprot)
            oprot.writeFieldEnd()
        if self.searchChoiceId is not None:
            oprot.writeFieldBegin('searchChoiceId', TType.STRING, 81)
            oprot.writeString(self.searchChoiceId.encode('utf-8') if sys.version_info[0] == 2 else self.searchChoiceId)
            oprot.writeFieldEnd()
        if self.searchQuery is not None:
            oprot.writeFieldBegin('searchQuery', TType.STRUCT, 91)
            self.searchQuery.write(oprot)
            oprot.writeFieldEnd()
        if self.includeVariantIds is not None:
            oprot.writeFieldBegin('includeVariantIds', TType.SET, 101)
            oprot.writeSetBegin(TType.STRING, len(self.includeVariantIds))
            for iter267 in self.includeVariantIds:
                oprot.writeString(iter267.encode('utf-8') if sys.version_info[0] == 2 else iter267)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.propertyQueries is not None:
            oprot.writeFieldBegin('propertyQueries', TType.LIST, 110)
            oprot.writeListBegin(TType.STRUCT, len(self.propertyQueries))
            for iter268 in self.propertyQueries:
                iter268.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PropertyQuery(object):
    """
    Attributes:
     - name
     - hitCount
     - evaluateTotal
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        (11, TType.STRING, 'name', 'UTF8', None, ),  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        (21, TType.I32, 'hitCount', None, None, ),  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        (31, TType.BOOL, 'evaluateTotal', None, None, ),  # 31
    )

    def __init__(self, name=None, hitCount=None, evaluateTotal=None,):
        self.name = name
        self.hitCount = hitCount
        self.evaluateTotal = evaluateTotal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 11:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.hitCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.evaluateTotal = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PropertyQuery')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 11)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.hitCount is not None:
            oprot.writeFieldBegin('hitCount', TType.I32, 21)
            oprot.writeI32(self.hitCount)
            oprot.writeFieldEnd()
        if self.evaluateTotal is not None:
            oprot.writeFieldBegin('evaluateTotal', TType.BOOL, 31)
            oprot.writeBool(self.evaluateTotal)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PropertyResult(object):
    """
    Attributes:
     - hits
     - name
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        (11, TType.LIST, 'hits', (TType.STRUCT, (PropertyHit, PropertyHit.thrift_spec), False), None, ),  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        (21, TType.STRING, 'name', 'UTF8', None, ),  # 21
    )

    def __init__(self, hits=None, name=None,):
        self.hits = hits
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 11:
                if ftype == TType.LIST:
                    self.hits = []
                    (_etype272, _size269) = iprot.readListBegin()
                    for _i273 in range(_size269):
                        _elem274 = PropertyHit()
                        _elem274.read(iprot)
                        self.hits.append(_elem274)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PropertyResult')
        if self.hits is not None:
            oprot.writeFieldBegin('hits', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.hits))
            for iter275 in self.hits:
                iter275.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 21)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PropertyHit(object):
    """
    Attributes:
     - value
     - label
     - totalHitCount
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        (11, TType.STRING, 'value', 'UTF8', None, ),  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        (21, TType.STRING, 'label', 'UTF8', None, ),  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        (31, TType.I64, 'totalHitCount', None, None, ),  # 31
    )

    def __init__(self, value=None, label=None, totalHitCount=None,):
        self.value = value
        self.label = label
        self.totalHitCount = totalHitCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 11:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.label = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I64:
                    self.totalHitCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PropertyHit')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 11)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 21)
            oprot.writeString(self.label.encode('utf-8') if sys.version_info[0] == 2 else self.label)
            oprot.writeFieldEnd()
        if self.totalHitCount is not None:
            oprot.writeFieldBegin('totalHitCount', TType.I64, 31)
            oprot.writeI64(self.totalHitCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AutocompleteResponse(object):
    """
    Attributes:
     - hits
     - prefixSearchResult
     - propertyResults
     - extraInfo
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        (11, TType.LIST, 'hits', (TType.STRUCT, (AutocompleteHit, AutocompleteHit.thrift_spec), False), None, ),  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        (21, TType.STRUCT, 'prefixSearchResult', (SearchResult, SearchResult.thrift_spec), None, ),  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        (31, TType.LIST, 'propertyResults', (TType.STRUCT, (PropertyResult, PropertyResult.thrift_spec), False), None, ),  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        None,  # 40
        (41, TType.MAP, 'extraInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 41
    )

    def __init__(self, hits=None, prefixSearchResult=None, propertyResults=None, extraInfo=None,):
        self.hits = hits
        self.prefixSearchResult = prefixSearchResult
        self.propertyResults = propertyResults
        self.extraInfo = extraInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 11:
                if ftype == TType.LIST:
                    self.hits = []
                    (_etype279, _size276) = iprot.readListBegin()
                    for _i280 in range(_size276):
                        _elem281 = AutocompleteHit()
                        _elem281.read(iprot)
                        self.hits.append(_elem281)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRUCT:
                    self.prefixSearchResult = SearchResult()
                    self.prefixSearchResult.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.LIST:
                    self.propertyResults = []
                    (_etype285, _size282) = iprot.readListBegin()
                    for _i286 in range(_size282):
                        _elem287 = PropertyResult()
                        _elem287.read(iprot)
                        self.propertyResults.append(_elem287)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.MAP:
                    self.extraInfo = {}
                    (_ktype289, _vtype290, _size288) = iprot.readMapBegin()
                    for _i292 in range(_size288):
                        _key293 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val294 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.extraInfo[_key293] = _val294
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AutocompleteResponse')
        if self.hits is not None:
            oprot.writeFieldBegin('hits', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.hits))
            for iter295 in self.hits:
                iter295.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.prefixSearchResult is not None:
            oprot.writeFieldBegin('prefixSearchResult', TType.STRUCT, 21)
            self.prefixSearchResult.write(oprot)
            oprot.writeFieldEnd()
        if self.propertyResults is not None:
            oprot.writeFieldBegin('propertyResults', TType.LIST, 31)
            oprot.writeListBegin(TType.STRUCT, len(self.propertyResults))
            for iter296 in self.propertyResults:
                iter296.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.extraInfo is not None:
            oprot.writeFieldBegin('extraInfo', TType.MAP, 41)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extraInfo))
            for kiter297, viter298 in self.extraInfo.items():
                oprot.writeString(kiter297.encode('utf-8') if sys.version_info[0] == 2 else kiter297)
                oprot.writeString(viter298.encode('utf-8') if sys.version_info[0] == 2 else viter298)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AutocompleteRequestBundle(object):
    """
    Attributes:
     - requests
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        (11, TType.LIST, 'requests', (TType.STRUCT, (AutocompleteRequest, AutocompleteRequest.thrift_spec), False), None, ),  # 11
    )

    def __init__(self, requests=None,):
        self.requests = requests

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 11:
                if ftype == TType.LIST:
                    self.requests = []
                    (_etype302, _size299) = iprot.readListBegin()
                    for _i303 in range(_size299):
                        _elem304 = AutocompleteRequest()
                        _elem304.read(iprot)
                        self.requests.append(_elem304)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AutocompleteRequestBundle')
        if self.requests is not None:
            oprot.writeFieldBegin('requests', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.requests))
            for iter305 in self.requests:
                iter305.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AutocompleteResponseBundle(object):
    """
    Attributes:
     - responses
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        (11, TType.LIST, 'responses', (TType.STRUCT, (AutocompleteResponse, AutocompleteResponse.thrift_spec), False), None, ),  # 11
    )

    def __init__(self, responses=None,):
        self.responses = responses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 11:
                if ftype == TType.LIST:
                    self.responses = []
                    (_etype309, _size306) = iprot.readListBegin()
                    for _i310 in range(_size306):
                        _elem311 = AutocompleteResponse()
                        _elem311.read(iprot)
                        self.responses.append(_elem311)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AutocompleteResponseBundle')
        if self.responses is not None:
            oprot.writeFieldBegin('responses', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.responses))
            for iter312 in self.responses:
                iter312.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChoiceUpdateRequest(object):
    """
    Request object for changing the choice, that is changing possible variants
    or their random distribution

    Attributes:
     - userRecord: user record identifying the client
     - choiceId: Identifier of the choice to be changed. If it is not given, a new choice will be created
     - variantIds: Map containing variant identifier and corresponding positive integer weight.
    If for a choice there is no learned rule which can be applied, weights of
    variants will be used for variants random distribution.
    Higher weight makes corresponding variant more probable.
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        (11, TType.STRUCT, 'userRecord', (UserRecord, UserRecord.thrift_spec), None, ),  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        None,  # 20
        (21, TType.STRING, 'choiceId', 'UTF8', None, ),  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        None,  # 30
        (31, TType.MAP, 'variantIds', (TType.STRING, 'UTF8', TType.I32, None, False), None, ),  # 31
    )

    def __init__(self, userRecord=None, choiceId=None, variantIds=None,):
        self.userRecord = userRecord
        self.choiceId = choiceId
        self.variantIds = variantIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 11:
                if ftype == TType.STRUCT:
                    self.userRecord = UserRecord()
                    self.userRecord.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.choiceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.MAP:
                    self.variantIds = {}
                    (_ktype314, _vtype315, _size313) = iprot.readMapBegin()
                    for _i317 in range(_size313):
                        _key318 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val319 = iprot.readI32()
                        self.variantIds[_key318] = _val319
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ChoiceUpdateRequest')
        if self.userRecord is not None:
            oprot.writeFieldBegin('userRecord', TType.STRUCT, 11)
            self.userRecord.write(oprot)
            oprot.writeFieldEnd()
        if self.choiceId is not None:
            oprot.writeFieldBegin('choiceId', TType.STRING, 21)
            oprot.writeString(self.choiceId.encode('utf-8') if sys.version_info[0] == 2 else self.choiceId)
            oprot.writeFieldEnd()
        if self.variantIds is not None:
            oprot.writeFieldBegin('variantIds', TType.MAP, 31)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.variantIds))
            for kiter320, viter321 in self.variantIds.items():
                oprot.writeString(kiter320.encode('utf-8') if sys.version_info[0] == 2 else kiter320)
                oprot.writeI32(viter321)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChoiceUpdateResponse(object):
    """
    Server response for one ChoiceUpdateRequest

    Attributes:
     - choiceId: Identifier of the changed choice. If no id is given in corresponding
    ChoiceUpdateRequest, new choice (and new id) will be created and retuned.
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        None,  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        None,  # 10
        (11, TType.STRING, 'choiceId', 'UTF8', None, ),  # 11
    )

    def __init__(self, choiceId=None,):
        self.choiceId = choiceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 11:
                if ftype == TType.STRING:
                    self.choiceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ChoiceUpdateResponse')
        if self.choiceId is not None:
            oprot.writeFieldBegin('choiceId', TType.STRING, 11)
            oprot.writeString(self.choiceId.encode('utf-8') if sys.version_info[0] == 2 else self.choiceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class P13nServiceException(TException):
    """
    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('P13nServiceException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
